name: Resolve Kernel Symbol Address

# Triggers the workflow on pushes to the main branch or manually from the Actions tab
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  resolve-symbol-address:
    name: Resolve IO80211Family Symbol
    
    # CRITICAL: This must run on a self-hosted runner with SIP disabled.
    runs-on: self-hosted

    steps:
      - name: 1. Checkout Repository
        uses: actions/checkout@v4

      - name: 2. Display Xcode Version
        run: xcodebuild -version
      
      - name: 3. Build the Kernel Extension
        run: |
          echo "Building SymbolResolver.kext..."
          # Assumes your Xcode project is named SymbolResolver.xcodeproj
          xcodebuild -project SymbolResolver.xcodeproj -scheme SymbolResolver -configuration Release build
        
      - name: 4. Resolve Symbol Address via Kext
        id: resolve
        run: |
          KEXT_PATH="build/Release/SymbolResolver.kext"
          LOG_FILE="resolved_symbol.log"
          
          echo "--- Preparing to load kext ---"
          if [ ! -d "$KEXT_PATH" ]; then
            echo "Kext not found at $KEXT_PATH!"
            exit 1
          fi

          # Set correct permissions
          sudo chown -R root:wheel "$KEXT_PATH"
          sudo chmod -R 755 "$KEXT_PATH"

          echo "--- Loading kext and capturing log ---"
          # Load the kext and immediately start listening to the log stream.
          # We use `timeout` to stop listening after 5 seconds.
          sudo kextload "$KEXT_PATH" &
          timeout 5s log stream --predicate 'process == "kernel" and sender == "SymbolResolver"' > "$LOG_FILE"
          
          echo "--- Unloading kext ---"
          sudo kextunload -b com.your-company.SymbolResolver # Use the kext's bundle ID

          echo "--- Parsing log file ---"
          cat "$LOG_FILE"

          # Grep for the successful log line
          RESULT_LINE=$(grep '[SymbolResolver] OK:' "$LOG_FILE")

          if [ -z "$RESULT_LINE" ]; then
            echo "Failed to resolve symbol. Log did not contain successful result."
            exit 1
          fi

          # Parse the address from the line ".... = 0xADDRESS"
          RESOLVED_ADDRESS=$(echo "$RESULT_LINE" | awk -F '= ' '{print $2}')
          
          if [ -z "$RESOLVED_ADDRESS" ]; then
            echo "Failed to parse address from log line."
            exit 1
          fi

          echo "Successfully resolved address: ${RESOLVED_ADDRESS}"
          
          # This is how we set an output for subsequent steps/jobs
          echo "resolved_address=${RESOLVED_ADDRESS}" >> "$GITHUB_OUTPUT"
          echo "log_content<<EOF" >> "$GITHUB_OUTPUT"
          echo "$(cat $LOG_FILE)" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: 5. Display Resolved Address
        run: echo "The resolved symbol address is ${{ steps.resolve.outputs.resolved_address }}"

      - name: 6. Upload Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: symbol-resolution-results
          path: |
            build/Release/SymbolResolver.kext
            resolved_symbol.log
