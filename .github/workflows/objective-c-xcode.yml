name: Fuzz Core Audio with Google Project Zero Fuzzer
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  fuzz-and-test:
    runs-on: macos-latest

    steps:
      # Clone your repository which contains the Swift harness
      - name: Clone Your Repository
        run: git clone https://github.com/encryptedcoderr/AppleTest2/

      # New Step: Clone the Google Project Zero tools repository
      - name: Clone Google Project Zero p0tools
        run: git clone https://github.com/googleprojectzero/p0tools.git

      # New Step: Create our Swift player harness
      - name: Create Swift Player Harness
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Creating Swift audio player harness..."
          cat > harness.swift << 'EOF'
          import Foundation
          import AVFoundation

          class PlayerDelegate: NSObject, AVAudioPlayerDelegate {
              var isPlaying = true
              func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool) {
                  // Don't print anything on success to keep logs clean.
                  isPlaying = false
              }
              func audioPlayerDecodeErrorDidOccur(_ player: AVAudioPlayer, error: Error?) {
                  print("Decode error: \(error?.localizedDescription ?? "unknown error")")
                  isPlaying = false
              }
          }

          if CommandLine.arguments.count < 2 {
              exit(1)
          }

          let filePath = CommandLine.arguments[1]
          let fileURL = URL(fileURLWithPath: filePath)

          do {
              let delegate = PlayerDelegate()
              let audioPlayer = try AVAudioPlayer(contentsOf: fileURL)
              audioPlayer.delegate = delegate
              audioPlayer.play()
              
              // Keep the program running while the audio plays.
              while delegate.isPlaying {
                  RunLoop.main.run(until: Date(timeIntervalSinceNow: 0.1))
              }
          } catch {
              // Suppress "The operation couldn’t be completed" errors for non-crashing invalid files
          }
          EOF

      # Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'
      
      # New Step: Compile the Swift player harness
      - name: Compile Swift Harness
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling Swift harness..."
          swiftc harness.swift -o harness
          if [ $? -ne 0 ]; then echo "Swift compilation failed."; exit 1; fi

      # New Step: Build the CoreAudioFuzz utility
      - name: Build CoreAudioFuzz
        working-directory: p0tools/CoreAudioFuzz
        run: |
          echo "Building CoreAudioFuzz utility..."
          make
          if [ ! -f ./fuzz_af ]; then
              echo "Fuzzer build failed."
              exit 1
          fi
          echo "Fuzzer built successfully."

      # New Step: Run the fuzzer to generate test cases
      - name: Generate Fuzzing Test Cases
        run: |
          echo "Generating fuzzing corpus..."
          mkdir -p fuzzing_corpus
          # Run the fuzzer to generate 100 test case files
          ./p0tools/CoreAudioFuzz/fuzz_af -max_len=4096 -runs=100 ./fuzzing_corpus/
          echo "Fuzzing corpus generated."
          ls -l ./fuzzing_corpus/

      # Final Step: Iterate through the corpus and test each file for a crash
      - name: Test Fuzzed Files for Crashes
        run: |
          echo "Testing all generated files for crashes..."
          mkdir -p crash_logs
          for f in fuzzing_corpus/*; do
            echo "Testing file: $f"
            LOG_FILE="crash_logs/$(basename $f).log"
            
            # Create the lldb script for this iteration
            cat > player_debug_script.lldb << 'EOF'
            run
            bt
            quit
            EOF

            # Run the test using our custom harness under lldb
            lldb -s player_debug_script.lldb -- ./AppleTest2/apple-positional-audio-codec-invalid-header-main/harness "$f" > "$LOG_FILE" 2>&1 || true
            
            # Check for a crash signature in the log file
            if grep -q "frame #0" "$LOG_FILE" && ! grep -q "stop reason = breakpoint" "$LOG_FILE" && ! grep -q "exited with status = 0" "$LOG_FILE"; then
              echo "✅✅✅ CRASH DETECTED: $f ✅✅✅"
              echo "Log saved to: $LOG_FILE"
              # Optional: Stop on first crash
              # exit 1 
            else
              # Clean up non-crashing logs to save space
              rm "$LOG_FILE"
            fi
          done
          echo "All files tested."

      # Upload any crashing artifacts
      - name: Upload Crashing Artifacts
        if: always() # Always run this step to upload results even if previous steps fail
        uses: actions/upload-artifact@v4
        with:
          name: crashing-files-and-logs
          path: |
            fuzzing_corpus/
