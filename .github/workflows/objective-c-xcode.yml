# This workflow is a focused diagnostic tool. It attempts to activate
# AirDrop and then runs a deep system call trace on all related daemons to
# understand why the wireless interface is not activating as expected.

name: Build and Run AWDL Diagnostic Trace
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-trace:
    runs-on: macos-latest

    steps:
      # Step 1: Create the main session script to orchestrate the diagnostic trace.
      - name: Create Diagnostic Trace Script
        run: |
          echo "Creating run_trace_session.sh script..."
          cat > run_trace_session.sh << 'EOF'
          #!/bin/bash
          if [ "$EUID" -ne 0 ]; then echo "Please run with sudo."; exit 1; fi

          LOG_DIR="diagnostic_trace_logs"
          mkdir -p $LOG_DIR && rm -f $LOG_DIR/*
          echo "--- Diagnostic Session Started: $(date) ---" | tee $LOG_DIR/session.log

          # --- ACTIVATION AND TRACING LOGIC ---
          echo "[*] Beginning diagnostic trace..."

          # Force restart the main Bluetooth daemon to ensure it's running.
          sudo launchctl kickstart -k system/com.apple.bluetoothd
          echo "    System Bluetooth daemon restarted."
          sleep 2

          # --- Part 1: Set AirDrop to "Everyone" and trace the immediate reaction ---
          echo "[*] Activating AirDrop 'Everyone' mode and tracing daemon reaction..."

          # Store the original AirDrop discoverability mode.
          ORIGINAL_MODE=$(defaults read com.apple.sharingd DiscoverableMode 2>/dev/null || echo "Contacts Only")
          echo "    Original AirDrop mode: $ORIGINAL_MODE"

          # Get a list of daemons to trace before we change the setting.
          PIDS_TO_TRACE=$(pgrep -x sharingd nearbyd rapportd airportd wifip2pd || echo "")
          
          # Start the first trace phase on the running daemons.
          if [ -n "$PIDS_TO_TRACE" ]; then
              for pid in $PIDS_TO_TRACE; do
                  PROC_NAME=$(ps -p $pid -o comm= | xargs basename)
                  echo "    Starting reaction trace for $PROC_NAME (PID $pid)..."
                  sudo dtruss -p $pid -f -d > "$LOG_DIR/dtruss_${PROC_NAME}_${pid}-reaction.log" 2>&1 &
              done
          else
              echo "⚠️ No target daemons running for reaction trace."
          fi

          # Now, change the setting. The tracers are already running and will capture the effect.
          sudo defaults write com.apple.sharingd DiscoverableMode Everyone
          NEW_MODE=$(defaults read com.apple.sharingd DiscoverableMode)
          if [ "$NEW_MODE" != "Everyone" ]; then
              echo "❌ Failed to set AirDrop mode to 'Everyone'. Current mode is '$NEW_MODE'."
              sudo pkill dtruss || true
              exit 1
          fi
          echo "    Verified AirDrop mode is set to 'Everyone'. Tracing reaction for 20 seconds..."
          sleep 20
          
          echo "[*] Stopping reaction-phase tracers."
          sudo pkill dtruss || true
          sleep 2

          # --- Part 2: Trace the daemon startup sequence ---
          echo "[*] Restarting daemons and tracing their startup sequence..."

          # Get a snapshot of interfaces before daemon restart.
          ifconfig -a | grep '^[a-z]' | cut -d':' -f1 | sort > /tmp/interfaces_before.txt
          
          # Force restart all related daemons to apply the new settings.
          sudo pkill sharingd nearbyd rapportd || true
          sleep 5 # Give daemons time to restart.

          # Start tracing the RESTARTED daemons.
          echo "[*] Attaching tracers to newly started daemons for 90 seconds..."
          PIDS_AFTER=$(pgrep -x sharingd nearbyd rapportd airportd wifip2pd || echo "")
          if [ -n "$PIDS_AFTER" ]; then
              for pid in $PIDS_AFTER; do
                  PROC_NAME=$(ps -p $pid -o comm= | xargs basename)
                  echo "    Starting startup trace for $PROC_NAME (PID $pid)..."
                  sudo dtruss -p $pid -f -d > "$LOG_DIR/dtruss_${PROC_NAME}_${pid}-after_restart.log" 2>&1 &
              done
          else
              echo "⚠️ Could not find any target daemons to trace after restart."
          fi

          sleep 90

          echo "[*] Stopping all tracers..."
          sudo pkill dtruss || true
          
          # --- DYNAMIC INTERFACE DISCOVERY ---
          echo "[*] Checking for new network interfaces after trace..."
          ifconfig -a | grep '^[a-z]' | cut -d':' -f1 | sort > /tmp/interfaces_after.txt
          NEW_INTERFACE=$(comm -13 /tmp/interfaces_before.txt /tmp/interfaces_after.txt)

          if [ -n "$NEW_INTERFACE" ]; then
              echo "✅ A new interface was discovered during the trace: $NEW_INTERFACE"
              ifconfig "$NEW_INTERFACE" > "$LOG_DIR/new_interface_details.txt"
          else
              echo "❌ No new network interface was created."
          fi
          # --- END DISCOVERY ---

          # --- CLEANUP LOGIC ---
          echo "[*] Restoring original AirDrop settings..."
          sudo defaults write com.apple.sharingd DiscoverableMode "$ORIGINAL_MODE"
          sudo pkill sharingd
          echo "    Restored AirDrop mode to '$ORIGINAL_MODE' and restarted sharingd."
          # --- END CLEANUP LOGIC ---

          echo "✅ Diagnostic trace complete. Logs are in '$LOG_DIR'."
          ls -l $LOG_DIR
          EOF
          chmod +x run_trace_session.sh

      # Step 2: Execute the diagnostic session.
      - name: Run Diagnostic Tracing Session
        run: sudo ./run_trace_session.sh

      # Step 3: Upload all captured logs as an artifact for analysis.
      - name: Upload Diagnostic Artifacts
        if: always() # Ensure logs are uploaded even if a step fails
        uses: actions/upload-artifact@v4
        with:
          name: awdl-diagnostic-logs
          path: diagnostic_trace_logs/
          retention-days: 7
