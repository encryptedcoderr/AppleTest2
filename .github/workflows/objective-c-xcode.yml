# This workflow is a focused diagnostic tool. It attempts to activate
# AirDrop and then runs a deep system call trace on all related daemons to
# understand why the wireless interface is not activating as expected.

name: Build and Run AWDL Diagnostic Trace
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-trace:
    runs-on: macos-latest

    steps:
      # Step 1: Create the main session script to orchestrate the diagnostic trace.
      - name: Create Diagnostic Trace Script
        run: |
          echo "Creating run_trace_session.sh script..."
          cat > run_trace_session.sh << 'EOF'
          #!/bin/bash
          if [ "$EUID" -ne 0 ]; then echo "Please run with sudo."; exit 1; fi

          LOG_DIR="diagnostic_trace_logs"
          mkdir -p $LOG_DIR && rm -f $LOG_DIR/*
          echo "--- Diagnostic Session Started: $(date) ---" | tee $LOG_DIR/session.log

          # --- ACTIVATION AND TRACING LOGIC ---
          echo "[*] Starting system-wide trace and then activating AirDrop..."

          # 1. Start tracing the parent process (launchd) BEFORE activation.
          # The -f flag will ensure we trace any child processes it spawns,
          # such as when sharingd and others are restarted.
          echo "[*] Starting dtruss to trace all relevant daemon activity..."
          # Note: We are now tracing the creation of the processes themselves.
          sudo dtruss -f -o $LOG_DIR/full_system_trace.log -n launchd &
          DTRUSS_PID=$!
          sleep 2 # Give dtruss a moment to attach.

          # 2. Store the original AirDrop discoverability mode.
          ORIGINAL_MODE=$(defaults read com.apple.sharingd DiscoverableMode 2>/dev/null || echo "Contacts Only")
          echo "    Original AirDrop mode: $ORIGINAL_MODE"

          # 3. Set AirDrop to Everyone.
          echo "[*] Setting AirDrop mode to 'Everyone'..."
          sudo defaults write com.apple.sharingd DiscoverableMode Everyone
          
          # 4. Force restart all related daemons to apply the new settings.
          echo "[*] Restarting sharingd, nearbyd, and rapportd to apply new settings..."
          sudo pkill sharingd nearbyd rapportd || true
          
          # 5. Let the trace run for an extended period to capture all activity.
          echo "[*] Tracing system for 90 seconds to capture the full activation sequence..."
          sleep 90

          echo "[*] Stopping tracers..."
          sudo kill $DTRUSS_PID || true
          
          # --- DYNAMIC INTERFACE DISCOVERY ---
          echo "[*] Checking for network interfaces..."
          ifconfig -a > $LOG_DIR/ifconfig_final.txt
          if grep -q "awdl0" $LOG_DIR/ifconfig_final.txt || grep -q "llw0" $LOG_DIR/ifconfig_final.txt; then
              echo "✅ A peer-to-peer interface (awdl0 or llw0) was found."
          else
              echo "❌ No new peer-to-peer network interface was created."
          fi
          # --- END DISCOVERY ---

          # --- CLEANUP LOGIC ---
          echo "[*] Restoring original AirDrop settings..."
          sudo defaults write com.apple.sharingd DiscoverableMode "$ORIGINAL_MODE"
          sudo pkill sharingd
          echo "    Restored AirDrop mode to '$ORIGINAL_MODE' and restarted sharingd."
          # --- END CLEANUP LOGIC ---

          echo "✅ Diagnostic trace complete. Logs are in '$LOG_DIR'."
          ls -l $LOG_DIR
          EOF
          chmod +x run_trace_session.sh

      # Step 2: Execute the diagnostic session.
      - name: Run Diagnostic Tracing Session
        run: sudo ./run_trace_session.sh

      # Step 3: Upload all captured logs as an artifact for analysis.
      - name: Upload Diagnostic Artifacts
        if: always() # Ensure logs are uploaded even if a step fails
        uses: actions/upload-artifact@v4
        with:
          name: awdl-diagnostic-logs
          path: diagnostic_trace_logs/
          retention-days: 7
