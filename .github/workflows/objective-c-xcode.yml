name: Fuzz Core Audio with Google Project Zero Fuzzer
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  fuzz-and-test:
    # Critical Change: Use an Intel-based macOS runner as required by the fuzzer.
    runs-on: macos-12

    steps:
      # Clone your repository which contains the Swift harness
      - name: Clone Your Repository
        run: git clone https://github.com/encryptedcoderr/AppleTest2/

      # Clone the Google Project Zero tools repository
      - name: Clone Google Project Zero p0tools
        run: git clone https://github.com/googleprojectzero/p0tools.git

      # Create our Swift player harness
      - name: Create Swift Player Harness
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Creating Swift audio player harness..."
          cat > harness.swift << 'EOF'
          import Foundation
          import AVFoundation

          class PlayerDelegate: NSObject, AVAudioPlayerDelegate {
              var isPlaying = true
              func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool) {
                  isPlaying = false
              }
              func audioPlayerDecodeErrorDidOccur(_ player: AVAudioPlayer, error: Error?) {
                  print("Decode error: \(error?.localizedDescription ?? "unknown error")")
                  isPlaying = false
              }
          }

          if CommandLine.arguments.count < 2 {
              exit(1)
          }

          let filePath = CommandLine.arguments[1]
          let fileURL = URL(fileURLWithPath: filePath)

          do {
              let delegate = PlayerDelegate()
              let audioPlayer = try AVAudioPlayer(contentsOf: fileURL)
              audioPlayer.delegate = delegate
              audioPlayer.play()
              
              while delegate.isPlaying {
                  RunLoop.main.run(until: Date(timeIntervalSinceNow: 0.1))
              }
          } catch {
              // Suppress errors for non-crashing invalid files
          }
          EOF

      # Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '14.2' # Use a version compatible with macos-12

      # Compile the Swift player harness
      - name: Compile Swift Harness
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling Swift harness..."
          swiftc harness.swift -o harness
          if [ ! -f ./harness ]; then echo "Swift compilation failed."; exit 1; fi

      # New: Build the fuzzer exactly as described in the README
      - name: Build CoreAudioFuzzer and Dependencies
        working-directory: p0tools/CoreAudioFuzz
        run: |
          echo "Building Jackalope and TinyInst..."
          # The fuzzer has its own harness.mm, we will use that one.
          cd jackalope-modifications
          git clone https://github.com/googleprojectzero/Jackalope.git
          cd Jackalope
          git clone --recurse-submodules https://github.com/googleprojectzero/TinyInst.git
          cd ..
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release
          
          echo "Fuzzer build complete. The executable should be in the 'Release' directory."
          ls -l ./Release/

      # New: Run the fuzzer using its provided run script
      - name: Generate Fuzzing Test Cases
        working-directory: p0tools/CoreAudioFuzz
        run: |
          echo "Unzipping provided corpus..."
          unzip corpus.zip
          
          echo "Generating fuzzing corpus using the run.sh script..."
          # The run.sh script handles launching the fuzzer correctly.
          # We run it in the background and kill it after a time limit to generate some files.
          ./run.sh &
          FUZZER_PID=$!
          sleep 60 # Let the fuzzer run for 60 seconds
          kill $FUZZER_PID
          
          # The corpus will likely be in a directory named "corpus" by the run.sh script
          ls -l ./corpus/

      # Final Step: Iterate through the generated corpus and test each file for a crash
      - name: Test Fuzzed Files for Crashes
        run: |
          echo "Testing all generated files for crashes..."
          mkdir -p crash_logs
          # The fuzzer likely places new findings in the 'crashes' directory
          for f in p0tools/CoreAudioFuzz/crashes/*; do
            if [ ! -f "$f" ]; then continue; fi # Handle empty directory case
            echo "Testing file: $f"
            LOG_FILE="crash_logs/$(basename "$f").log"
            
            cat > player_debug_script.lldb << 'EOF'
            run
            bt
            quit
            EOF

            # Run the test using our custom Swift harness under lldb
            lldb -s player_debug_script.lldb -- ./AppleTest2/apple-positional-audio-codec-invalid-header-main/harness "$f" > "$LOG_FILE" 2>&1 || true
            
            # Check for a crash signature
            if grep -q "frame #0" "$LOG_FILE" && ! grep -q "exited with status = 0" "$LOG_FILE"; then
              echo "✅✅✅ CRASH DETECTED: $f ✅✅✅"
              echo "Log saved to: $LOG_FILE"
            else
              rm "$LOG_FILE"
            fi
          done
          echo "All files tested."

      # Upload any crashing artifacts
      - name: Upload Crashing Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: crashing-files-and-logs
          path: |
            p0tools/CoreAudioFuzz/crashes/
            crash_logs/
          retention-days: 7
