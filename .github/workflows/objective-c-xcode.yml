name: Generate Audio Files

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-generate:
    runs-on: macos-latest

    steps:
      # Clone the repository
      - name: Clone repository
        run: |
          echo "Cloning repository at $(date)"
          git clone https://github.com/encryptedcoderr/AppleTest/
          echo "Repository cloned at $(date)"
      # Navigate and list directory contents
      - name: Navigate and list directory contents
        run: |
          echo "Navigating to directory at $(date)"
          cd AppleTest/apple-positional-audio-codec-invalid-header-main
          echo "Listing directory contents at $(date)"
          ls -l
          echo "Directory listing completed at $(date)"
      # Patch encodeme.mm for 10-second M4A
      - name: Patch encodeme.mm
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Patching encodeme.mm at $(date)"
          cat > encodeme.mm << EOF
          @import AVFAudio;
          @import AudioToolbox;
          #include <cmath>
          int main() {
              uint32_t channelNum = 1;
              AVAudioFormat* formatIn = [[AVAudioFormat alloc] initStandardFormatWithSampleRate:44100
                                                                               channels:channelNum];
              AVAudioChannelLayout* channelLayout =
                  [AVAudioChannelLayout layoutWithLayoutTag:kAudioChannelLayoutTag_Mono];
              const int sampleRate = 44100;
              const int durationSeconds = 10;
              const int totalSamples = sampleRate * durationSeconds; // 441,000 samples
              const int samplesPerBuffer = 1024; // Frame size for AAC
              float* audioBuffer = (float*)malloc(samplesPerBuffer * sizeof(float));
              // --- M4A Output (AAC) ---
              AudioStreamBasicDescription m4aDescription{
                  .mSampleRate = 44100,
                  .mFormatID = kAudioFormatMPEG4AAC,
                  .mFormatFlags = 0,
                  .mBytesPerPacket = 0,
                  .mFramesPerPacket = 1024,
                  .mBytesPerFrame = 0,
                  .mChannelsPerFrame = channelNum,
                  .mBitsPerChannel = 0,
                  .mReserved = 0
              };
              NSURL* m4aUrl = [NSURL fileURLWithPath:@"output.m4a"];
              ExtAudioFileRef m4aFile = nullptr;
              OSStatus status = ExtAudioFileCreateWithURL((__bridge CFURLRef)m4aUrl, kAudioFileM4AType,
                                                          &m4aDescription, channelLayout.layout,
                                                          kAudioFileFlags_EraseFile, &m4aFile);
              if (status) {
                  fprintf(stderr, "error creating M4A file: %x\n", status);
                  free(audioBuffer);
                  return 1;
              }
              status = ExtAudioFileSetProperty(m4aFile, kExtAudioFileProperty_ClientDataFormat,
                                               sizeof(AudioStreamBasicDescription), formatIn.streamDescription);
              if (status) {
                  fprintf(stderr, "error setting M4A client format: %x\n", status);
                  ExtAudioFileDispose(m4aFile);
                  free(audioBuffer);
                  return 1;
              }
              status = ExtAudioFileSetProperty(m4aFile, kExtAudioFileProperty_ClientChannelLayout,
                                               sizeof(AudioChannelLayout), formatIn.channelLayout.layout);
              if (status) {
                  fprintf(stderr, "error setting M4A channel layout: %x\n", status);
                  ExtAudioFileDispose(m4aFile);
                  free(audioBuffer);
                  return 1;
              }
              // Write audio to M4A
              for (int i = 0; i < totalSamples; i += samplesPerBuffer) {
                  int samplesToWrite = (i + samplesPerBuffer <= totalSamples) ? samplesPerBuffer : (totalSamples - i);
                  // Generate 440 Hz sine wave
                  for (int j = 0; j < samplesToWrite; j++) {
                      audioBuffer[j] = sin(2 * M_PI * 440 * (i + j) / sampleRate) * 0.5f;
                  }
                  AudioBufferList audioBufferList{
                      .mNumberBuffers = 1,
                      .mBuffers = {
                          {
                              .mNumberChannels = 1,
                              .mDataByteSize = static_cast<UInt32>(samplesToWrite * sizeof(float)),
                              .mData = audioBuffer,
                          },
                      },
                  };
                  status = ExtAudioFileWrite(m4aFile, samplesToWrite, &audioBufferList);
                  if (status) {
                      fprintf(stderr, "error writing M4A audio: %x\n", status);
                      ExtAudioFileDispose(m4aFile);
                      free(audioBuffer);
                      return 1;
                  }
              }
              free(audioBuffer);
              // Close M4A file
              status = ExtAudioFileDispose(m4aFile);
              if (status) {
                  fprintf(stderr, "error closing M4A file: %x\n", status);
                  return 1;
              }
              return 0;
          }
          EOF
          echo "encodeme.mm patched at $(date)"
      # Log Xcode setup start
      - name: Log Xcode setup start
        run: |
          echo "Setting up Xcode at $(date)"
      # Set up specific Xcode version
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1' # Use Xcode 16.1, compatible with macOS frameworks

      # Log Xcode setup completion
      - name: Log Xcode setup completion
        run: |
          echo "Xcode setup completed at $(date)"
      # Verify Xcode and clang version
      - name: Verify Xcode and clang version
        run: |
          echo "Verifying Xcode and clang versions at $(date)"
          xcodebuild -version
          clang++ --version
          xcrun --sdk macosx --show-sdk-path
          echo "Verification completed at $(date)"
      # Check system resources
      - name: Check system resources
        run: |
          echo "Checking system resources at $(date)"
          df -h
          system_profiler SPHardwareDataType
          echo "System resource check completed at $(date)"
      # Verify encodeme.mm
      - name: Verify encodeme.mm
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Verifying files at $(date)"
          if [ -f "encodeme.mm" ]; then
            echo "encodeme.mm found"
            ls -l encodeme.mm
          else
            echo "encodeme.mm not found"
            ls -l
            exit 1
          fi
          echo "File verification completed at $(date)"
      # Compile encodeme.mm for macOS
      - name: Compile encodeme.mm
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Preparing to compile encodeme.mm at $(date)"
          clang++ -g -Os -std=c++2b -fmodules -fcxx-modules -fobjc-arc -arch arm64 -isysroot $(xcrun --sdk macosx --show-sdk-path) -framework AVFAudio -framework AudioToolbox encodeme.mm -o encodeme
          if [ $? -eq 0 ]; then
            echo "Compilation successful at $(date)"
            echo "Listing compiled binary at $(date)"
            ls -l encodeme || echo "Compiled binary 'encodeme' not found"
            BINARY_SIZE=$(stat -f %z encodeme 2>/dev/null || stat -c %s encodeme 2>/dev/null)
            echo "Binary size: $BINARY_SIZE bytes"
          else
            echo "Compilation failed at $(date)"
            exit 1
          fi
      # Run encodeme to generate output.m4a
      - name: Run encodeme
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Running encodeme at $(date)"
          chmod +x encodeme
          ./encodeme
          if [ $? -eq 0 ]; then
            echo "encodeme executed successfully at $(date)"
          else
            echo "encodeme execution failed at $(date)"
            exit 1
          fi
      # Install FFmpeg for conversion and ffprobe
      - name: Install FFmpeg
        run: |
          echo "Installing FFmpeg at $(date)"
          brew install ffmpeg
          echo "FFmpeg installed at $(date)"
      # Convert M4A to MP3
      - name: Convert M4A to MP3
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Converting output.m4a to output.mp3 at $(date)"
          ffmpeg -i output.m4a -c:a mp3 -b:a 128k -ac 1 output.mp3
          if [ $? -eq 0 ]; then
            echo "Conversion successful at $(date)"
          else
            echo "Conversion failed at $(date)"
            exit 1
          fi
      # Verify generated files
      - name: Verify generated files
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Checking for generated files at $(date)"
          ls -lh output.m4a output.mp3 || echo "One or more output files not found at $(date)"
          if [ -f "output.m4a" ]; then
            M4A_SIZE=$(stat -f %z output.m4a 2>/dev/null || stat -c %s output.m4a 2>/dev/null)
            echo "output.m4a size: $M4A_SIZE bytes"
            if [ "$M4A_SIZE" -eq 0 ]; then
              echo "Error: output.m4a is 0 bytes"
              exit 1
            fi
            ffprobe -i output.m4a -show_format -show_streams -print_format json || echo "ffprobe failed for output.m4a"
          else
            echo "output.m4a not found"
            exit 1
          fi
          if [ -f "output.mp3" ]; then
            MP3_SIZE=$(stat -f %z output.mp3 2>/dev/null || stat -c %s output.mp3 2>/dev/null)
            echo "output.mp3 size: $MP3_SIZE bytes"
            if [ "$MP3_SIZE" -eq 0 ]; then
              echo "Error: output.mp3 is 0 bytes"
              exit 1
            fi
            ffprobe -i output.mp3 -show_format -show_streams -print_format json || echo "ffprobe failed for output.mp3"
          else
            echo "output.mp3 not found"
            exit 1
          fi
      # Log artifact upload start
      - name: Log artifact upload start
        run: |
          echo "Uploading artifacts at $(date)"
      # Upload M4A and MP3 files as artifacts
      - name: Upload audio artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audio-files
          path: |
            AppleTest/apple-positional-audio-codec-invalid-header-main/output.m4a
            AppleTest/apple-positional-audio-codec-invalid-header-main/output.mp3
          retention-days: 7
          if-no-files-found: error

      # Log artifact upload completion
      - name: Log artifact upload completion
        run: |
          echo "Artifact upload completed at $(date)"
