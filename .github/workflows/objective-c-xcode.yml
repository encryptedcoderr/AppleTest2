name: Generate, Play, and Debug Audio Source
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-generate-and-debug:
    runs-on: macos-latest

    steps:
      # Clone the repository
      - name: Clone repository
        run: git clone https://github.com/encryptedcoderr/AppleTest/

      # Navigate to the correct directory
      - name: Navigate to working directory
        run: cd AppleTest/apple-positional-audio-codec-invalid-header-main && ls -l

      # We are focusing on the failing AudioFileCreateWithURL call.
      - name: Patch encodeme.mm to attempt direct APAC creation
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Patching encodeme.mm to directly create an APAC file to trace the failure..."
          cat > encodeme.mm << 'EOF'
          #import <Foundation/Foundation.h>
          #import <AudioToolbox/AudioToolbox.h>
          #include <stdlib.h>
          #include <string.h>

          int main(int argc, const char * argv[]) {
              @autoreleasepool {
                  time_t startTime = time(NULL);
                  fprintf(stderr, "Starting encodeme at %s", ctime(&startTime));

                  const char* fileName = "output_apac_poc.m4a";
                  CFURLRef fileURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault,
                                                                   (CFStringRef)[NSString stringWithUTF8String:fileName],
                                                                   kCFURLPOSIXPathStyle, false);

                  // Define the audio format for APAC to trigger the framework's internal validation.
                  AudioStreamBasicDescription asbd = {0};
                  asbd.mSampleRate = 48000;
                  asbd.mFormatID = 'apac'; // Use the specific APAC format ID
                  asbd.mFramesPerPacket = 1024;
                  asbd.mChannelsPerFrame = 4;

                  AudioFileID audioFile;
                  // This call is expected to fail. We will debug it to find the check.
                  OSStatus status = AudioFileCreateWithURL(fileURL, kAudioFileM4AType, &asbd, kAudioFileFlags_EraseFile, &audioFile);
                  if (status != noErr) {
                      fprintf(stderr, "AudioFileCreateWithURL failed as expected with status: %d ('%c%c%c%c')\n",
                              status, (char)((status>>24)&0xFF), (char)((status>>16)&0xFF), (char)((status>>8)&0xFF), (char)(status&0xFF));
                      return 1;
                  }

                  AudioFileClose(audioFile);
                  CFRelease(fileURL);

                  fprintf(stderr, "encodeme completed (unexpectedly succeeded).\n");
                  time_t endTime = time(NULL);
                  fprintf(stderr, "encodeme completed at %s", ctime(&endTime));
              }
              return 0;
          }
          EOF

      # Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Compile encodeme.mm with debug symbols
      - name: Compile encodeme.mm for Debugging
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling encodeme.mm with debug symbols (-g)..."
          clang++ -g -fobjc-arc -framework Foundation -framework AudioToolbox encodeme.mm -o encodeme_debug
          if [ $? -ne 0 ]; then echo "Compilation failed."; exit 1; fi

      # Improved: Use a regular expression to find the mangled C++ symbol name.
      - name: Debug File Generation with LLDB
        working-directory: AppleTest/apple-positional-audio-codec-invalid-header-main
        run: |
          LLDB_LOG="lldb_log.txt"
          echo "--- Debugging encodeme_debug with LLDB ---" > $LLDB_LOG
          echo "Timestamp: $(date)" >> $LLDB_LOG
          
          echo "Creating advanced LLDB script to find the validation function..."
          cat > debug_script.lldb << 'EOF'
          # Set a breakpoint using a regular expression to find the correct mangled function name.
          # The -r flag sets a breakpoint on any C++ symbol that contains "IsDataFormatSupported".
          breakpoint set -r IsDataFormatSupported
          run
          # The program will now be stopped inside the correct validation function.
          # This backtrace will show the exact call stack that leads to the check.
          script print("\n--- Program stopped inside the validation function. Capturing backtrace... ---\n")
          bt
          continue
          quit
          EOF

          echo "Launching encodeme_debug under LLDB to trace the API call..." >> $LLDB_LOG
          lldb -s debug_script.lldb -- ./encodeme_debug >> $LLDB_LOG 2>&1 || true
          echo "âœ… LLDB log created."

      # Upload all debug artifacts
      - name: Upload All Debug Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: |
            AppleTest/apple-positional-audio-codec-invalid-header-main/lldb_log.txt
          retention-days: 7
          if-no-files-found: error
