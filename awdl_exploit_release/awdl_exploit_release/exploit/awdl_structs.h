#ifndef AWDL_STRUCTS_H
#define AWDL_STRUCTS_H

#include <stdint.h>
#include <net/ethernet.h>

// Radiotap Header (simplified)
struct ieee80211_radiotap_header_compat {
    uint8_t version;
    uint8_t pad;
    uint16_t len;
    uint32_t present;
} __attribute__((packed));

// IEEE 802.11 Frame Header
struct ieee80211_hdr {
    uint16_t frame_control;
    uint16_t duration_id;
    struct ether_addr dst_addr;
    struct ether_addr src_addr;
    struct ether_addr bssid_addr;
    uint16_t seq_ctrl;
} __attribute__((packed));

// AWDL Action Frame
struct awdl_action {
    uint8_t category;
    struct {
        uint8_t bytes[3];
    } oui;
    uint8_t type;
    uint8_t version;
    uint8_t subtype;
    uint8_t reserved;
    uint32_t phy_tx;
    uint32_t target_tx;
} __attribute__((packed));

// AWDL Synchronization Parameters TLV
struct awdl_sync_params_tlv {
    uint8_t type;
    uint16_t length;
    uint8_t next_aw_channel;
    uint16_t tx_down_counter;
    uint8_t master_channel;
    uint8_t guard_time;
    uint16_t aw_period;  // AW period in TUs
    uint16_t af_period;  // how often action frames are sent out in TUs
    uint16_t flags;
    uint16_t aw_ext_length;  // length of an extended AW in TUs
    uint16_t aw_com_length;  // length of a regular AW in TUs
    uint16_t remaining_aw_length;
    uint8_t min_ext;
    uint8_t max_ext_multicast;
    uint8_t max_ext_unicast;
    uint8_t max_ext_af;
    struct ether_addr master_addr;
    uint8_t presence_mode;
    uint8_t reserved;
    uint16_t next_aw_seq;
    uint16_t ap_alignment;
    
    // CHANSEQ
    uint8_t count;
    uint8_t encoding;
    uint8_t duplicate_count;
    uint8_t step_count;
    uint16_t fill_channel;
    uint16_t seq[16];
} __attribute__((packed));

// Packet Buffer Structure
typedef struct pkt_buf {
    size_t len;
    uint8_t buf[];
} pkt_buf_t;

// Basic TLV
struct basic_tlv {
    uint8_t type;
    uint16_t len;
} __attribute__((packed));

// Function prototype for packet injection (assuming this function exists)
void inject(pcap_t *handle, ...);

// Function prototype for packet buffer wrapping
pkt_buf_t *pkt_buf_wrap(void *buffer, size_t len);

// Constants for AWDL
#define IEEE80211_VENDOR_SPECIFIC 127
#define AWDL_TYPE 8
#define AWDL_VERSION_COMPAT ((uint8_t)(((1) << 4) & 0xf0) | ((0) & 0x0f)) // Version 1.0
#define IEEE80211_FCTL_FTYPE 0x000c
#define IEEE80211_FCTL_STYPE 0x00f0
#define IEEE80211_FTYPE_MGMT   0x0000
#define IEEE80211_STYPE_ACTION 0x00d0

// Define a dummy MAC address for AWDL BSSID if needed
extern const struct ether_addr awdl_bssid;

#endif // AWDL_STRUCTS_H