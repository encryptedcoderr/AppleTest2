#!/usr/bin/python
import subprocess
import sys

if len(sys.argv) < 2:
    print('no input')
    exit()

infile = sys.argv[1]

# compile it
cmd = 'xcrun --sdk iphoneos clang -arch arm64 -fPIC -O2 -Xlinker -sectalign -Xlinker __TEXT -Xlinker __text -Xlinker 0x4000 -Xlinker -sectalign -Xlinker __TEXT -Xlinker __cstring -Xlinker 0x4 -Os -fomit-frame-pointer -o stage1 %s' % infile 
print(cmd)
output = subprocess.check_output(cmd, shell=True)
print(output);

# there should only be 2 relevant sections: __TEXT __text and __TEXT __cstring, and they should be next to each other

# get the bytes
cmd = 'xcrun --sdk iphoneos otool -s __TEXT __text stage1 | grep "^00" | cut -f 2 && xcrun --sdk iphoneos otool -s __TEXT __cstring stage1 | grep "^00" | cut -f 2'
print(cmd)

outstr = 'uint32_t shellcode[] = {\n'

output = subprocess.check_output(cmd, shell=True)
lines = output.split('\n')
total_words = 0
for l in lines[:-1]:
    words = l.split(' ')
    for idx, word in enumerate(words[:-1]):
        # sometimes the length of the section won't be on a 4 byte boundary so we'll get individual bytes
        if len(word) == 2:
            # collect the rest of the bytes and form the byte:
            rem = (len(words)-1) - idx
            if (rem == 3):
                outstr += '  0x00%s%s%s,\n' % (words[idx+2], words[idx+1], words[idx])
            if (rem == 2):
                outstr += '  0x0000%s%s,\n' % (words[idx+1], words[idx])
            if (rem == 1):
                outstr += '  0x000000%s,\n' % (words[idx])
            total_words += 1
            break
        outstr += '  0x%s,\n' % word
        total_words += 1

outstr = outstr[:-2]
outstr += '};\n'

print(outstr)

# generate code to resolve the symbols
# stage1 only has 2 symbols we're interested in: _dlsym and kaddr
cmd = 'nm -a -U stage1'

outstr = '''
#define SYM(type, offset, val) *(type*)(((uint8_t*)shellcode)+offset) = val

void rebase_shellcode(uint64_t slide) {
'''

output = subprocess.check_output(cmd, shell=True)
lines = output.split('\n')
syms = {}
for l in lines[:-1]:
    fields = l.split(' ')
    offset = int(fields[0], 16)
    sym = fields[2]
    syms[sym] = offset

_dlsym_offset = syms['__dlsym'] - syms['_start']
_kdata_offset = syms['_kdata'] - syms['_start']

outstr += '  uint64_t dlsym = 0x4141414141414141;\n'
outstr += '  uint64_t kdata = 0x4242424242424242;\n'

outstr += '  SYM(%s, 0x%x, %s);\n' % ('uint64_t', _dlsym_offset, 'dlsym')
outstr += '  SYM(%s, 0x%x, %s);\n' % ('uint64_t', _kdata_offset, 'kdata')

outstr += '}\n'

print(outstr)









